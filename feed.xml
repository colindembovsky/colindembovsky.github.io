<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://github.com/pages/colindembovsky/feed.xml" rel="self" type="application/atom+xml" /><link href="https://github.com/pages/colindembovsky/" rel="alternate" type="text/html" hreflang="en" /><updated>2021-11-18T20:23:33+00:00</updated><id>https://github.com/pages/colindembovsky/feed.xml</id><title type="html">Colin’s ALM Corner</title><subtitle>All things DevOps and GitHub. Musings about DevOps tooling, culture and philosophy.
</subtitle><author><name>Colin Dembovsky</name></author><entry><title type="html">GitHub Actions: Authenticate to Azure Without a Secret using OIDC</title><link href="https://github.com/pages/colindembovsky/actions-authenticate-to-azure-without-a-secret/" rel="alternate" type="text/html" title="GitHub Actions: Authenticate to Azure Without a Secret using OIDC" /><published>2021-11-09T01:22:01+00:00</published><updated>2021-11-09T01:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/actions-authenticate-to-azure-without-a-secret</id><content type="html" xml:base="https://github.com/pages/colindembovsky/actions-authenticate-to-azure-without-a-secret/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#update-11172021&quot; id=&quot;markdown-toc-update-11172021&quot;&gt;Update: 11/17/2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problem-statement&quot; id=&quot;markdown-toc-problem-statement&quot;&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oidc&quot; id=&quot;markdown-toc-oidc&quot;&gt;OIDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sample-action-using-oidc&quot; id=&quot;markdown-toc-sample-action-using-oidc&quot;&gt;Sample Action using OIDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#azure-configuration&quot; id=&quot;markdown-toc-azure-configuration&quot;&gt;Azure Configuration&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-service-principal-app-registration&quot; id=&quot;markdown-toc-creating-a-service-principal-app-registration&quot;&gt;Creating a Service Principal (App Registration)&lt;/a&gt;        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;#authorize-the-spn&quot; id=&quot;markdown-toc-authorize-the-spn&quot;&gt;Authorize the SPN&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-configuration&quot; id=&quot;markdown-toc-github-configuration&quot;&gt;GitHub Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-main-workflow&quot; id=&quot;markdown-toc-the-main-workflow&quot;&gt;The Main Workflow&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#the-composite-workflow&quot; id=&quot;markdown-toc-the-composite-workflow&quot;&gt;The Composite Workflow&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-the-workflow&quot; id=&quot;markdown-toc-running-the-workflow&quot;&gt;Running the Workflow&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#dev-logs&quot; id=&quot;markdown-toc-dev-logs&quot;&gt;Dev Logs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prod-logs&quot; id=&quot;markdown-toc-prod-logs&quot;&gt;Prod Logs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bad-prod-logs&quot; id=&quot;markdown-toc-bad-prod-logs&quot;&gt;Bad-prod Logs&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#limitations&quot; id=&quot;markdown-toc-limitations&quot;&gt;Limitations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image from &lt;a href=&quot;https://www.freepik.com/vectors/business&quot;&gt;www.freepik.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;update-11172021&quot;&gt;Update: 11/17/2021&lt;/h1&gt;

&lt;p&gt;In the original version of this post, I extracted the Azure login task to a Composite Action because you need a beta version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt; for the OIDC to work. As of today, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@v1&lt;/code&gt; tag of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure/login&lt;/code&gt; (which has been updated to include OIDC logic) and you do not have to install the beta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt;. This makes the Composite Action obsolete - all you have to do now is call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure/login&lt;/code&gt; task as before, not passing the secret (assuming you configure the federated credential on the SPN in Azure).&lt;/p&gt;

&lt;h1 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h1&gt;

&lt;p&gt;Deploying to Azure or other cloud providers from Actions requires that you authenticate to the provider. Not only do you have to authenticate, but the credential you use needs authorization to perform tasks in the cloud platform.&lt;/p&gt;

&lt;p&gt;For Azure, this is accomplished by creating a Service Principal (SPN) and then saving the credentials for that SPN to your GitHub repo (or organization) as a secret. The secret is then consumed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions/login&lt;/code&gt; &lt;a href=&quot;https://github.com/azure/login&quot;&gt;task&lt;/a&gt; to authenticate to Azure before you perform any other steps:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clientId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GUID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clientSecret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;some value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tenantId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GUID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;subscriptionId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GUID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;The format of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_CREDENTIAL&lt;/code&gt; secret.&lt;/p&gt;

&lt;p&gt;The problem with this secret is that it has to be maintained in GitHub. What happens when you rotate the client secret? Deployments will start to fail unless you update the secret. And if you’re using the credential across multiple repos, you’ll have to update the secret in each place it’s used.&lt;/p&gt;

&lt;h1 id=&quot;oidc&quot;&gt;OIDC&lt;/h1&gt;

&lt;p&gt;To help solve this problem, GitHub has been working with cloud providers to implement &lt;a href=&quot;https://openid.net/connect/&quot;&gt;OpenID Connect&lt;/a&gt; (OIDC) authentication. This is an established, standard protocol that allows systems to request and receive information about authenticated users. You can read more about the supported providers in the &lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is that you configure your cloud provider to issue a short-lived token to a specific GitHub repo (optionally scoping to a branch, environment, tag or “any PR”). When you run a workflow, you configure the cloud provider authentication step to request a token for a given security context (SPN for Azure, ARN for AWS for example). If the provider is happy with the request, it issues a token that the step then uses to authenticate the session and the rest of the steps proceed as usual.&lt;/p&gt;

&lt;p&gt;For Azure, this means that we can eliminate the &lt;em&gt;secret&lt;/em&gt; part of the Azure credential - we still need to know the tenant, subscription and client ID. Since these values are useless without the secret (which you don’t need) you don’t have to rotate them, or even store them secretly, though storing them as secrets is convenient.&lt;/p&gt;

&lt;h1 id=&quot;sample-action-using-oidc&quot;&gt;Sample Action using OIDC&lt;/h1&gt;

&lt;p&gt;You can take a look at &lt;a href=&quot;https://github.com/colindembovsky/azure-oidc-demo&quot;&gt;this repo&lt;/a&gt; which contains the code for this post.&lt;/p&gt;

&lt;p&gt;For this sample, I wanted to configure two service Principals (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mon-oidc-prod&lt;/code&gt;) that are given access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-prod&lt;/code&gt; resource groups respectively. I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environments in the repo, and configured the OIDC scoped to the environment, as we’ll see later.&lt;/p&gt;

&lt;p&gt;I then set up a workflow that used the correct clients for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;, expecting those to work as advertised. Finally I added a “bad” job that hard-coded the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt; client ID and attempted to authenticate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environment, just to make sure that the authentication fails.&lt;/p&gt;

&lt;h1 id=&quot;azure-configuration&quot;&gt;Azure Configuration&lt;/h1&gt;

&lt;p&gt;For the Azure side, I started by creating two service Principals. Nothing special about these, apart from the fact that I have created a &lt;strong&gt;federated credential&lt;/strong&gt; that enables the OIDC connection.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-service-principal-app-registration&quot;&gt;Creating a Service Principal (App Registration)&lt;/h2&gt;

&lt;p&gt;Navigate to the Active Directory blade in the Azure Portal and click &lt;strong&gt;+Add -&amp;gt; App registration&lt;/strong&gt;. Type in the name and URL - these just have to be unique, but can be any value:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/create-spn.png&quot; alt=&quot;Create a new SPN&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Create a new SPN.&lt;/p&gt;

&lt;p&gt;Once created, click on &lt;strong&gt;Certificates &amp;amp; Secrets&lt;/strong&gt; and then on &lt;strong&gt;Federated credentials&lt;/strong&gt;. Click &lt;strong&gt;+ Add Credential&lt;/strong&gt; to add a new federated credential.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/oidc-federation-config.png&quot; alt=&quot;Configure the OIDC settings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Configure the OIDC settings.&lt;/p&gt;

&lt;p&gt;Enter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entity type&lt;/code&gt; and additional entity filters if applicable, as well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; for the credential. You can see at the bottom how Azure constructs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subject identifier&lt;/code&gt; for you based on the values you select. Under the hood, when Actions requests a token, it will send a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;/code&gt; parameter, and if this matched, Azure will issue a token.&lt;/p&gt;

&lt;p&gt;Finally, go back to the &lt;strong&gt;Overview&lt;/strong&gt; tab of the app registration and note the &lt;strong&gt;Application (client) ID&lt;/strong&gt; and &lt;strong&gt;Directory (tenant) ID&lt;/strong&gt;. You’ll also need the ID of the subscription you plan to target.&lt;/p&gt;

&lt;p&gt;I repeated these steps to create a new SPN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-prod&lt;/code&gt;) and configured the federated credentials the same way as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt; except that I set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;authorize-the-spn&quot;&gt;Authorize the SPN&lt;/h3&gt;

&lt;p&gt;Don’t forget that you have to grant the SPN roles within your subscription(s). If you plan to create resource groups, then assign the SPN the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contributor&lt;/code&gt; role on your subscription(s). If you want to scope the SPN a little more narrowly, then add it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contributor&lt;/code&gt; on one or more resource groups. You can of course use whatever custom roles you need as well.&lt;/p&gt;

&lt;p&gt;In my case, I created two resource groups, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-prod&lt;/code&gt; and assigned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-prod&lt;/code&gt; respectively as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contributors&lt;/code&gt;. This means the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt; can only “see” the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-dev&lt;/code&gt; resource group and that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-prod&lt;/code&gt; can only “see” the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-prod&lt;/code&gt; resource group.&lt;/p&gt;

&lt;h1 id=&quot;github-configuration&quot;&gt;GitHub Configuration&lt;/h1&gt;

&lt;p&gt;Now we can configure the GitHub side. In &lt;strong&gt;Settings -&amp;gt; Environments&lt;/strong&gt; I create two environments: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;. I then create the following secrets:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Scope&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_TENANT_ID&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Repo&lt;/td&gt;
      &lt;td&gt;ID of the AAD tenant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_SUBSCRIPTION_ID&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Repo&lt;/td&gt;
      &lt;td&gt;ID of the target subscription&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_CLIENT_ID&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; environment&lt;/td&gt;
      &lt;td&gt;App (client) ID for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_CLIENT_ID&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environment&lt;/td&gt;
      &lt;td&gt;App (client) ID for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-prod&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I could have specified the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_SUBSCRIPTION_ID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_TENANT_ID&lt;/code&gt; at environment level if they differed. Most organizations will have separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; subscriptions, but usually share a single tenant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/secret-config.png&quot; alt=&quot;Configure environments and secrets&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Configure environments and secrets.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: none of these values constitutes a “secret” value. We have not added a secret for the client secret anywhere - just enough information to tell Azure which context we are going to request a token for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course you can add other environment configuration like approvals and deployment branches. I’ve left those as empty for this sample.&lt;/p&gt;

&lt;h1 id=&quot;the-main-workflow&quot;&gt;The Main Workflow&lt;/h1&gt;

&lt;p&gt;Here is the workflow that we’ll be using:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: '.github/workflows/azure.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OIDC Demo&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id-token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to Dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure Login using OIDC&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/workflows/composite/azure-oidc-login&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tenant_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_TENANT_ID }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_CLIENT_ID }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;subscription_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_SUBSCRIPTION_ID }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;az&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commands'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az account show&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az group list&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pwd&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to Prod&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prod&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure Login using OIDC&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/workflows/composite/azure-oidc-login&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tenant_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_TENANT_ID }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_CLIENT_ID }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;subscription_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_SUBSCRIPTION_ID }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;az&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commands'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az account show&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az group list&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pwd&lt;/span&gt;
        
  &lt;span class=&quot;na&quot;&gt;bad-prod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to Prod using dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prod&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure Login using OIDC&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/workflows/composite/azure-oidc-login&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tenant_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_TENANT_ID }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;84b86cb5-5fbd-4950-88fa-1ab04be41de5&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;subscription_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_SUBSCRIPTION_ID }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;az&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commands'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az account show&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az group list&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pwd&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;The main workflow file.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We have to specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id-token: write&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permission&lt;/code&gt; for this workflow to be able to retrieve and use an OIDC token.&lt;/li&gt;
  &lt;li&gt;There are three jobs: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; (which authenticates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; (which authenticates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad-prod&lt;/code&gt; which uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; client ID and attempts to get a token for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environment.&lt;/li&gt;
  &lt;li&gt;Each job uses a composite action (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./.github/workflows/composite/azure-oidc-login&lt;/code&gt;) to authenticate to Azure, passing in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription_id&lt;/code&gt;. The values that get passed are the values from the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; that is specified in each job.&lt;/li&gt;
  &lt;li&gt;After the authentication, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt; commands are executed, in this case just showing the current subscription (account) and listing the resource groups.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad-prod&lt;/code&gt; job is targeting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environment, so can’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.AZURE_CLIENT_ID&lt;/code&gt; otherwise it would get the ID for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-prod&lt;/code&gt;. Just for demonstration, I have hard-coded the client ID of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-composite-workflow&quot;&gt;The Composite Workflow&lt;/h2&gt;

&lt;p&gt;Why is there a &lt;a href=&quot;/github-composite-actions/&quot;&gt;composite action&lt;/a&gt; at all? This is because in order to authenticate to Azure using OIDC, we have to use a beta version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt;. Rather than install this each time, I extracted this script and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure/login&lt;/code&gt; step into a composite that can be reused.&lt;/p&gt;

&lt;p&gt;Here is the composite action code:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: '.github/workflows/composite/azure-oidc-login/action.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OIDC Azure Login&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tenant_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure AAD tenant ID&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;subscription_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure subscription ID&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure client ID that has been federated to repo/env/branch/tag&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;composite&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Installing CLI-beta for OpenID Connect&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;cd ../..&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;CWD=&quot;$(pwd)&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;python3 -m venv oidc-venv&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;. oidc-venv/bin/activate&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;echo &quot;activated environment&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;python3 -m pip install -q --upgrade pip&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;echo &quot;started installing cli beta&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;pip install -q --extra-index-url https://azcliprod.blob.core.windows.net/beta/simple/ azure-cli&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;echo &quot;***************installed cli beta*******************&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;echo &quot;$CWD/oidc-venv/bin&quot; &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;azure/login@v1.4.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Log in using OIDC&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tenant-id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.tenant_id }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;client-id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.client_id }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;subscription-id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.subscription_id }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;The composite action to login using OIDC.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The composite requires three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; - the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_id&lt;/code&gt; that we need for the authentication.&lt;/li&gt;
  &lt;li&gt;The first step executes a script to install the beta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt;. When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt; is updated to include OIDC features, this step (and the composite action) will no longer be necessary.&lt;/li&gt;
  &lt;li&gt;The second step uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure/login@v1.4.0&lt;/code&gt; - this is the release that supports OIDC. It uses the inputs to request a token, and if successful, uses the token to authenticate the remainder of this session (job).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;running-the-workflow&quot;&gt;Running the Workflow&lt;/h1&gt;

&lt;p&gt;When we run the workflow, it works as expected. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; jobs both work correctly. However, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad-prod&lt;/code&gt; job fails since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; does not match (remember, this was an attempt to authenticate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environment using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt; credentials):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/workflow-run.png&quot; alt=&quot;Workflow run&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;A workflow run.&lt;/p&gt;

&lt;h2 id=&quot;dev-logs&quot;&gt;Dev Logs&lt;/h2&gt;

&lt;p&gt;Looking at the logs for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; we can see a successful authentication, and we can see that the context only has access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-dev&lt;/code&gt; resource group:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/dev-log.png&quot; alt=&quot;Dev logs&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Dev logs.&lt;/p&gt;

&lt;h2 id=&quot;prod-logs&quot;&gt;Prod Logs&lt;/h2&gt;

&lt;p&gt;Similarly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; logs show a successful authentication, and we the context only has access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oidc-prod&lt;/code&gt; resource group:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/prod-log.png&quot; alt=&quot;Prod logs&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Prod logs.&lt;/p&gt;

&lt;h2 id=&quot;bad-prod-logs&quot;&gt;Bad-prod Logs&lt;/h2&gt;

&lt;p&gt;Finally, we see that the authentication failed for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad-prod&lt;/code&gt; since the environment was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; but the client ID was for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mona-oidc-dev&lt;/code&gt;, which would have failed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;/code&gt; match in AAD:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/oidc/bad-prod-log.png&quot; alt=&quot;Bad prod logs&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Bad prod logs.&lt;/p&gt;

&lt;h1 id=&quot;limitations&quot;&gt;Limitations&lt;/h1&gt;

&lt;p&gt;At present, you cannot specify individual users for the OIDC credential - only repo-level entities.&lt;/p&gt;

&lt;p&gt;Also, if you were thinking you could use a reusable workflow and request tokens from consuming workflows this way, you’re out of luck. Even if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure/login&lt;/code&gt; step is in a reusable workflow, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;/code&gt; will contain the child repo context. This means that if you use the same reusable workflow in 10 repos, you will have to add all 10 repos as federated identities in the SPN Federated Credentials settings in Azure AAD.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Authenticating to cloud providers without secrets using OIDC is arguably more secure than having to store secrets. Tokens issues are short-lived, and because teams don’t have to store secrets, there is no need to rotate keys. Using OIDC to Azure is fairly simple and does not require a large change to existing workflows.&lt;/p&gt;

&lt;p&gt;Happy federating!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="build" /><category term="security" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/2021/11/oidc/Data_security_27.jpg" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/2021/11/oidc/Data_security_27.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Enforcing Reusable Workflows for Standardization</title><link href="https://github.com/pages/colindembovsky/enforcing-reusable-workflows-for-standardization/" rel="alternate" type="text/html" title="Enforcing Reusable Workflows for Standardization" /><published>2021-11-03T01:22:01+00:00</published><updated>2021-11-03T01:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/enforcing-reusable-workflows-for-standardization</id><content type="html" xml:base="https://github.com/pages/colindembovsky/enforcing-reusable-workflows-for-standardization/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#problem-statement&quot; id=&quot;markdown-toc-problem-statement&quot;&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuration&quot; id=&quot;markdown-toc-configuration&quot;&gt;Configuration&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#team-and-repo-configuration&quot; id=&quot;markdown-toc-team-and-repo-configuration&quot;&gt;Team and Repo Configuration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#workflows&quot; id=&quot;markdown-toc-workflows&quot;&gt;Workflows&lt;/a&gt;        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;#app-team-code-scan-workflow&quot; id=&quot;markdown-toc-app-team-code-scan-workflow&quot;&gt;App Team Code Scan Workflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#app-team-code-scan-workflow-1&quot; id=&quot;markdown-toc-app-team-code-scan-workflow-1&quot;&gt;App Team Code Scan Workflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#the-build-workflow&quot; id=&quot;markdown-toc-the-build-workflow&quot;&gt;The Build Workflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#reusable-code-scan-workflow&quot; id=&quot;markdown-toc-reusable-code-scan-workflow&quot;&gt;Reusable Code Scan Workflow&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#reusable-deploy-workflow&quot; id=&quot;markdown-toc-reusable-deploy-workflow&quot;&gt;Reusable Deploy Workflow&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#codeowners-file&quot; id=&quot;markdown-toc-codeowners-file&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; File&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#branch-protection-policy&quot; id=&quot;markdown-toc-branch-protection-policy&quot;&gt;Branch Protection Policy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#environments&quot; id=&quot;markdown-toc-environments&quot;&gt;Environments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#secrets&quot; id=&quot;markdown-toc-secrets&quot;&gt;Secrets&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#working-like-a-charm&quot; id=&quot;markdown-toc-working-like-a-charm&quot;&gt;Working Like a Charm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#can-it-be-bypassed&quot; id=&quot;markdown-toc-can-it-be-bypassed&quot;&gt;Can It Be Bypassed?&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#attempt-to-inject-bad-code&quot; id=&quot;markdown-toc-attempt-to-inject-bad-code&quot;&gt;Attempt to Inject Bad Code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#attempt-to-deploy-a-bad-branch-to-prod&quot; id=&quot;markdown-toc-attempt-to-deploy-a-bad-branch-to-prod&quot;&gt;Attempt to Deploy a Bad Branch to Prod&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#attempt-to-change-deployment-steps&quot; id=&quot;markdown-toc-attempt-to-change-deployment-steps&quot;&gt;Attempt to Change Deployment Steps&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#attempt-to-change-codeowners&quot; id=&quot;markdown-toc-attempt-to-change-codeowners&quot;&gt;Attempt to Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#caring-about-culture&quot; id=&quot;markdown-toc-caring-about-culture&quot;&gt;Caring About Culture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image from &lt;a href=&quot;https://www.freepik.com/vectors/flyer&quot;&gt;www.freepik.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h1&gt;

&lt;p&gt;There is a delicate balance between &lt;em&gt;team autonomy&lt;/em&gt; and &lt;em&gt;enterprise alignment&lt;/em&gt;. Too much autonomy can result in chaos, rework and runaway spending. Too much red tape can result in logn cycle times, frustration and lack of innovation. But it is possible to implement some level of compliance and leave teams some autonomy too.&lt;/p&gt;

&lt;p&gt;Imagine you want to ensure that code that gets deployed is scanned using CodeQL. Furthermore, you want to enforce a specific set of steps for deploying your apps. You would prefer your app teams to be able to build, test and package applications themselves. In this post I’ll show how you can achieve do this using GitHub.&lt;/p&gt;

&lt;p&gt;We’ll be working with two imaginary Teams: an App Team and a Compliance Team. Let’s take a look at the roles of these two teams:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Item&lt;/th&gt;
      &lt;th&gt;App Team&lt;/th&gt;
      &lt;th&gt;Compliance Team&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/td&gt;
      &lt;td&gt;Ensure that all code changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; are peer-reviewed and pass quality gates before merge&lt;/td&gt;
      &lt;td&gt;Same as App Team&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Build, test and package the application&lt;/td&gt;
      &lt;td&gt;Responsible for this workflow&lt;/td&gt;
      &lt;td&gt;Reviews, but is really interested in the final deployable package&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code Scan&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Must ensure that all deployable code has been scanned&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Deployment&lt;/td&gt;
      &lt;td&gt;Provide package for deployment. Can also collaborate on deployment steps.&lt;/td&gt;
      &lt;td&gt;Final accountability and maintenance of deployment process&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dev Environment&lt;/td&gt;
      &lt;td&gt;May want to gate with manual approval&lt;/td&gt;
      &lt;td&gt;Just supply the deployment process&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Prod Environment&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Ensure only code from protected branches is deployed and configure manual approval gate&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One way to achieve this may be for all PRs to require approvals from the Compliance Team - but this is not practical and does not scale.&lt;/p&gt;

&lt;p&gt;A better solution is to use the following mechanism:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Compliance Team configures the repo to allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; access for the Compliance Team and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; access for the App team.&lt;/li&gt;
  &lt;li&gt;Compliance Team creates reusable workflows for code scanning and deployment in a Workflows repo.&lt;/li&gt;
  &lt;li&gt;Compliance Team creates one or more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-&lt;/code&gt; workflows in the app repo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; directory. These workflows call the reusable workflows in the Worfklows repo.&lt;/li&gt;
  &lt;li&gt;Compliance Team creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file, enforcing that changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitub/workflows/compliant-*&lt;/code&gt; require approvals from the Compliance Team&lt;/li&gt;
  &lt;li&gt;Compliance Team configures &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch to be protected. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require Code Review by CODEOWNERS&lt;/code&gt; is enabled. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Required Checks&lt;/code&gt; is enabled, requiring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-code-scan&lt;/code&gt; workflow to pass before allowing merges. Other settings can be set in collaboration with the App Team.&lt;/li&gt;
  &lt;li&gt;Compliance Team creates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environments, requiring the appropriate approvers. On &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;, require appropriate approvers and also require that only protected branches can be deployed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this set of configuration, the Compliance Team can ensure that teams are following approved processes, not beome a bottleneck, and leave the App Team to get on with their work. Let’s walk through this configuration step by step.&lt;/p&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: All the code for this demo is available in this &lt;a href=&quot;https://github.com/colinsalmcorner/compliant-app&quot;&gt;app repo&lt;/a&gt; and in this &lt;a href=&quot;https://github.com/colinsalmcorner/super-approved-workflows&quot;&gt;workflow repo&lt;/a&gt;. I’ve made these public repos to share content, but typically these would be internal or private repos in your GitHub org.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;team-and-repo-configuration&quot;&gt;Team and Repo Configuration&lt;/h2&gt;

&lt;p&gt;Let’s start by configuring the Teams. While you could configure these setting using individuals, setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; to be owned bu the Compliance Team is more scalable - and as folks leave/join the team, you don’t have to update configuration in app repos. So you’ll need to create at least the Compliance Team in your organization, adding appropriate members. You can even make the team &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secret&lt;/code&gt; if you choose to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/create-compliance-team.png&quot; alt=&quot;Create a Compliance Team&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Create a Compliance Team.&lt;/p&gt;

&lt;p&gt;Now you can create a repo for your approved workflows. Obviously the Compliance Team should be the owners/contributors to this repo. Other teams can create PRs if they wish to, but should not be able to directly write to this repo, or at leat to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;For this example, I’m putting my reusable workflows into a repo called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-approved-workflows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can now create an App Team, though this is not necessary.&lt;/p&gt;

&lt;p&gt;Now you can create the application repo. An administrator should ensure that the Compliance Team is set with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; priveledges on this repo, since they’ll have to do some initial configuration and will be adding files that the App Team cannot change without Compliance Team approvals. In the settings tab of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-app&lt;/code&gt; repo, I’ve configured the Teams like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/app-repo-settings.png&quot; alt=&quot;Configure Team access on app repo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;CConfigure Team access on app repo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Ensure that the App Team are not given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; permissions, or they will be able to work around the compliance settings! I think that the team should only require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; permissions, but there may be cases where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maintain&lt;/code&gt; is required. Default to lowest priviledges first (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt;) and create an App Maintainer team for a subset of the app team if you really need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maintain&lt;/code&gt; permissions for some operations. You can see the different between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maintain&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; &lt;a href=&quot;https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-roles-for-an-organization#permissions-for-each-role&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;workflows&quot;&gt;Workflows&lt;/h2&gt;

&lt;p&gt;To help visualize how the workflow files are organized, I drew this awesome PowerPoint art:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/workflows-for-compliance.png&quot; alt=&quot;Overview of how the workflows are structured&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Overview of how the workflows are structured.&lt;/p&gt;

&lt;p&gt;Let’s now dig into the workflows.&lt;/p&gt;

&lt;h3 id=&quot;app-team-code-scan-workflow&quot;&gt;App Team Code Scan Workflow&lt;/h3&gt;

&lt;p&gt;The Compliance Team should add a workflow in the App Repo to scan code. We’ll have a look at the called workflow later, but for now, here is the workflow for the App Team:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'APP_REPO/.github/workflows/compliant-scan.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Scan app&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Code scan&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colinsalmcorner/super-approved-workflows/.github/workflows/codeql-scan.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&quot;csharp&quot;]'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-scan.yml&lt;/code&gt; workflow that invokes the centrally managed Code Scanning workflow.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The file name has the special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-&lt;/code&gt; prefix. Any changes to this file will require Compliance Team approvals (configured via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file).&lt;/li&gt;
  &lt;li&gt;We can add whatever triggers make sense, but should at least have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull_request&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; trigger this workflow.&lt;/li&gt;
  &lt;li&gt;The job just calls the centrally managed, reusable code scan workflow, passing in the language(s) we want scanned.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;app-team-code-scan-workflow-1&quot;&gt;App Team Code Scan Workflow&lt;/h3&gt;

&lt;p&gt;The Compliance Team should now add a workflow in the App Repo to scan code. We’ll have a look at the called workflow later, but for now, here is the workflow for the App Team:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'APP_REPO/.github/workflows/compliant-deploy.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy Pipeline&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colinsalmcorner/compliant-app/.github/workflows/build.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to DEV&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colinsalmcorner/super-approved-workflows/.github/workflows/deploy-app.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment-url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://dev.my-super-app.net&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.DEV_PASSWORD }}&lt;/span&gt;
  
  &lt;span class=&quot;na&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to PROD&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colinsalmcorner/super-approved-workflows/.github/workflows/deploy-app.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prod&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment-url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://my-super-app.net&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.PROD_PASSWORD }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-deploy.yml&lt;/code&gt; workflow that invokes a “local” reusable workflow and then invokes the centrally managed Deploy workflow for each environment.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Again, the file name has the special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-&lt;/code&gt; prefix. Any changes to this file will require Compliance Team approvals (configured via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file).&lt;/li&gt;
  &lt;li&gt;We can add whatever triggers make sense - in this case, I’ve just configured manual trigger (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_dispatch&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;There are three jobs: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; job is calling a “local” (in the same repo) reusable workflow that the App Team has full control over that builds, tests and packages the app. To make this work with the deployment workflows, we need to publish an artifact (called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt; in this case). The deploy workflow will download the artifact and then deploy.&lt;/li&gt;
  &lt;li&gt;We can pass whatever parameters we need to here - in this case I’ve configured parameters for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;artifact-name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment-name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment-url&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Secrets are tricky since reusable workflows can’t (yet?) read environment secrets. So you have to specify secrets on the repo (or org) level that are prefixed with the environment name in some way.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-build-workflow&quot;&gt;The Build Workflow&lt;/h3&gt;

&lt;p&gt;Before we switch over to the reusable workflows from the Compliance Team, let’s have a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.yml&lt;/code&gt; workflow from the App Team:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'APP_REPO/.github/workflows/compliant-deploy.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build app&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of the artifact to upload&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup .NET&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-dotnet@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.0.x&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Restore dependencies&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet restore&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.test }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet test --no-build --verbosity normal&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Publish&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet publish -c Release -o tmpdrop&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload a Build Artifact&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-artifact@v2.2.2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.artifact-name }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tmpdrop/**&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if-no-files-found&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;error&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-deploy.yml&lt;/code&gt; workflow that invokes a “local” reusable workflow and then invokes the centrally managed Deploy workflow for each environment.&lt;/p&gt;

&lt;h3 id=&quot;reusable-code-scan-workflow&quot;&gt;Reusable Code Scan Workflow&lt;/h3&gt;

&lt;p&gt;This is just a stock CodeQL workflow that the Compliance Team will create in the Compliance repo. Obviously it must be reusable:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'COMPLIANCE-REPO/.github/workflows/codeql-scan.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CodeQL&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Languages to scan, in the format of JSON array, e.g. '[&quot;csharp&quot;, &quot;typescript&quot;]'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
  
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;analyze&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Analyze&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;read&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;read&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;security-events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;fail-fast&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ fromJSON(inputs.languages) }}&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout repository&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Initialize CodeQL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github/codeql-action/init@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.language }}&lt;/span&gt;
    
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Autobuild&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github/codeql-action/autobuild@v1&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Perform CodeQL Analysis&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github/codeql-action/analyze@v1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codeql-scan.yml&lt;/code&gt; workflow that runs CodeQL scanning.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; makes this workflow reusable.&lt;/li&gt;
  &lt;li&gt;We pass in a JSON string of languages (since we can’t pass arrays to reusable workflows).&lt;/li&gt;
  &lt;li&gt;We specify minimal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permissions&lt;/code&gt; for the workflow.&lt;/li&gt;
  &lt;li&gt;We create a matrix that spawns a job for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;: checkout, initialize, autobuild and then analyze.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;reusable-deploy-workflow&quot;&gt;Reusable Deploy Workflow&lt;/h3&gt;

&lt;p&gt;This example shows how to download the build artifact and then dumps the secret to show that it’s getting a value. The actual deployment steps would be inserted into this workflow in real life.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'COMPLIANCE-REPO/.github/workflows/deploy-app.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet application&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Platform to execute on&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
        
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of the artifact to deploy&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;
      
      &lt;span class=&quot;na&quot;&gt;environment-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of environment&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      
      &lt;span class=&quot;na&quot;&gt;environment-url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;URL of environment&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy app&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.runs-on }}&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.environment-name }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.environment-url }}&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/download-artifact@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.artifact-name }}&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Display structure of downloaded files&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ls -R&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Password&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;JUST FOR TESTING&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Password is ${{ secrets.PASSWORD }}&quot;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;## INSERT deployment steps here&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-app.yml&lt;/code&gt; workflow that downloads an artifact and has a placeholder for “real” deployment steps.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; makes this workflow reusable.&lt;/li&gt;
  &lt;li&gt;We specify the input args and secrets that are required for deployment steps.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; settings are configurable.&lt;/li&gt;
  &lt;li&gt;The workflow downloads the artifact, but doesn’t actually do anything with it - the real deployment steps would go at the bottom of the job.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;codeowners-file&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; File&lt;/h2&gt;

&lt;p&gt;The Compliance Team now creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; folder of the App repo. This tells the repo that any changes to the files specified require review by the Compliance Team:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# Changes to `compliant-` workflows requires @compliance-team approval&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;/.github/workflows/compliant-* @colinsalmcorner/compliance-team&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Changes to `CODEOWNERS` requires @compliance-team approval&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;/.github/CODEOWNERS @colinsalmcorner/compliance-team&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file to enforce Compliance Team approvals for changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-*&lt;/code&gt; workflows.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-&lt;/code&gt; prefix is an arbitrary prefix. It can be anything you want, but in this case I wanted to distinguish between workflows the App Team can mess with and those that they can’t. All workflows must be in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; folder, so adding a prefix was the only way this would work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;branch-protection-policy&quot;&gt;Branch Protection Policy&lt;/h2&gt;

&lt;p&gt;Now that we have the scaffolding in place, we need to ensure that no-one who doesn’t have permissions overwrites or changes files that they shouldn’t! We can do that using branch protection policies.&lt;/p&gt;

&lt;p&gt;In the App Repo, navigate to &lt;strong&gt;Settings-&amp;gt;Branches&lt;/strong&gt; and apply the following settings to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch (or whatever your protected branch is called):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/branch-protection-settings.png&quot; alt=&quot;Configuring Branch Protection&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Configuring Branch Protection.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require a pull request before merging&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require approvals&lt;/code&gt; - these should be default on any repo, regardless of compliance level.&lt;/li&gt;
  &lt;li&gt;We enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require review from Code Owners&lt;/code&gt; to ensure the Compliance Team is notified of changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-&lt;/code&gt; workflows.&lt;/li&gt;
  &lt;li&gt;To ensure that Code Scanning is performed for all deployable code, we enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require status checks to pass before merging&lt;/code&gt; and then select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code Scan&lt;/code&gt; workflow. We also enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Require branches be up to date before merging&lt;/code&gt; as a good practice.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;environments&quot;&gt;Environments&lt;/h2&gt;

&lt;p&gt;The final bit of configuration is performed on the Environments. Let’s look at the settings for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; environment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/environment-config.png&quot; alt=&quot;Configuring the Prod Environment&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Configuring the Prod Environment.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We add appropriate manual approvals.&lt;/li&gt;
  &lt;li&gt;Under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deployent branches&lt;/code&gt; we configure only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Protected branches&lt;/code&gt; may be deployed (currently only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;secrets&quot;&gt;Secrets&lt;/h2&gt;

&lt;p&gt;As mentioned, we’ll have to create environment-prefixed repo (or org) secrets since reusable workflows don’t support environment secrets. The Compliance Team can create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV_PASSWORD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD_PASSWORD&lt;/code&gt; in this example.&lt;/p&gt;

&lt;h1 id=&quot;working-like-a-charm&quot;&gt;Working Like a Charm&lt;/h1&gt;

&lt;p&gt;Updates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and PRs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; now trigger the code scanning workflow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/running-code-scan.png&quot; alt=&quot;Code Scan running&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Code Scan running.&lt;/p&gt;

&lt;p&gt;If the Deploy pipeline is triggered in the Actions tab, the pipeline executes as expected. First, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; job builds, tests and packages the application. Then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; deployment job is triggered to deploy to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; environment. Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; job is triggered, but only from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch and with the pause for manual approval:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/running-deploy.png&quot; alt=&quot;Deploy Pipeline running&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Deploy Pipeline running.&lt;/p&gt;

&lt;h1 id=&quot;can-it-be-bypassed&quot;&gt;Can It Be Bypassed?&lt;/h1&gt;

&lt;p&gt;Now that we have things configured, let’s see if we can bypass anything! I created an account called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; that is a contributor on the App Repo - he’s part of the App Team. Let’s imagine he’s nefarious too!&lt;/p&gt;

&lt;h2 id=&quot;attempt-to-inject-bad-code&quot;&gt;Attempt to Inject Bad Code&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt;’s first attack vector might be the code itself. So he tries to change the code on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Cloning locally, changing the code, and pushing fails. In the UI, there’s no way to change code other than creating a branch and submitting a PR:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/inject-bad-code.png&quot; alt=&quot;Trying to inject bad code into main&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Trying to inject bad code into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; will have to submit a PR. He can’t just sneak bad code into the codebase - at least, not into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch, without a code review.&lt;/p&gt;

&lt;h2 id=&quot;attempt-to-deploy-a-bad-branch-to-prod&quot;&gt;Attempt to Deploy a Bad Branch to Prod&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; then tries his second attack vector: he’ll inject bad code into a branch and then deploy &lt;em&gt;that&lt;/em&gt; to production! He commits bad code to an innoucously named branch: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin-patch-2&lt;/code&gt; for example. No PR - wouldn’t want anyone blocking the bad code, now would we? Now to sneak that code into production, he goes to the Actions tab and queues the Deployment Pipeline, selecting his malicious branch as the source:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/queue-bad-code.png&quot; alt=&quot;Queuing a deployment containing malicious code&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Queuing a deployment containing malicious code.&lt;/p&gt;

&lt;p&gt;Ha! Bad code on its way…&lt;/p&gt;

&lt;p&gt;Except that the branch protection policy kicks in and prevents the deployment to prod!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/no-prod-deploy.png&quot; alt=&quot;Branch protection policy rejecting prod deployment&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Branch protection policy rejecting prod deployment.&lt;/p&gt;

&lt;p&gt;At worst, the malicious code is now in the dev environment. You could technically add approvals to the dev environment too, but if you’ve walled off your dev/prod environments correctly, the risk of malicious code in dev should be minimal. You have to trust your developers at some stage of the process, otherwise people will be totally bogged down in red tape. At least you can rest assured that prod environments are still protected.&lt;/p&gt;

&lt;h2 id=&quot;attempt-to-change-deployment-steps&quot;&gt;Attempt to Change Deployment Steps&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; then decides to change the workflows. Perhaps he doesn’t want code scanning to uncover the vulnerability he’s introducing, so he’ll just bypass the code scanning workflow. So he opens up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/compliant-scan.yml&lt;/code&gt; and removes the call to the reusable workflow:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'APP-REPO/.github/workflows/compliant-scan.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Scan app&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#name: Code scan&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#uses: colinsalmcorner/super-approved-workflows/.github/workflows/codeql-scan.yml@main&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#with:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#  languages: '[&quot;csharp&quot;]'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo Code is secure&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Attempting to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compliant-scan.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Once again, he can’t do this on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; so he has to create a branch and a PR. Interestingly, GitHub is smart enought to know that even though the workflow executed on the PR branch is the required workflow, it still required a check from the workflow in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch. In the screenshot below, you can see that the “bad” workflow (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scan app / scan (pull_request)&lt;/code&gt;) is passing, but the check is still blocked because the “good” workflow (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code scan / Analyze (csharp)&lt;/code&gt;) hasn’t been run:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/bypass-code-scan-fail.png&quot; alt=&quot;Unable to bypass the Code Scan workflow requirement&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Unable to bypass the Code Scan workflow requirement.&lt;/p&gt;

&lt;h2 id=&quot;attempt-to-change-codeowners&quot;&gt;Attempt to Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; then decides to see if he can jimmy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file. He tries to add himself as a code owner:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# Changes to `compliant-` workflows requires @compliance-team approval&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;/.github/workflows/compliant-* @colinsalmcorner/compliance-team @faux-colin&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Changes to `CODEOWNERS` requires @compliance-team approval&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;/.github/CODEOWNERS @colinsalmcorner/compliance-team @faux-colin&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Attempt to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; as a code owner for the workflows.&lt;/p&gt;

&lt;p&gt;Once again our hacker is foiled! A PR now contains his attempted modifications and merging would require approvals from the Compliance Team:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/compliance-reusable/attempted-codeowner-change.png&quot; alt=&quot;PR blocks unapproved changes to the CODEOWNERS file&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;PR blocks unapproved changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file.&lt;/p&gt;

&lt;h1 id=&quot;caring-about-culture&quot;&gt;Caring About Culture&lt;/h1&gt;

&lt;p&gt;It seems that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faux-colin&lt;/code&gt; has not been able to inject malicious code into the application. Of course, this gives the Compliance Team peace of mind: after all, malicious developers are probably few and far between. However, if a malicious developer can’t bypass the process, then there’s little chance that a developer will &lt;em&gt;mistakenly&lt;/em&gt; do something bad. There are enough checks and balances in the configuration.&lt;/p&gt;

&lt;p&gt;That means that the Compliance Team have done their job and can &lt;em&gt;get out of the way&lt;/em&gt; and let the App Team do what they do best - code, and hopefully innovate! Remember, DevOps (or DevSecOps if you really prefer) is &lt;em&gt;cultural&lt;/em&gt; too. Here we have a good balance of process adherence and compliance without developers being overburdened with red tape or the Compliance Team becoming a bottleneck because they have to enforce draconian policies manually.&lt;/p&gt;

&lt;p&gt;Caring about the culture your team works under is critical to success today. After all, Talent Management is one of the four top &lt;a href=&quot;https://www.mckinsey.com/industries/technology-media-and-telecommunications/our-insights/developer-velocity-how-software-excellence-fuels-business-performance&quot;&gt;Developer Velocity&lt;/a&gt; &lt;em&gt;business&lt;/em&gt; performance indicators. If you can ensure your code is safe and compliant &lt;em&gt;and&lt;/em&gt; foster a positive culture, you’re winning. And using GitHub, you can!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Using a combination of branch protection policies, permission management, reusable workflows, environment approvals and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODEOWNERS&lt;/code&gt; file, teams can achieve a good combination of autonomy and enterprise alignment. Compliance Teams can rest assured that the process is being enforced without becoming blockers. Developers are happy, Compliance is happy - and business will boom.&lt;/p&gt;

&lt;p&gt;Happy complying!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="build" /><category term="security" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/2021/11/compliance-reusable/hacker.jpg" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/2021/11/compliance-reusable/hacker.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Comparing Code Quality Metrics with Code Security</title><link href="https://github.com/pages/colindembovsky/comparing-code-quality-metrics-with-code-security/" rel="alternate" type="text/html" title="Comparing Code Quality Metrics with Code Security" /><published>2021-11-01T01:22:01+00:00</published><updated>2021-11-01T01:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/comparing-code-quality-metrics-with-code-security</id><content type="html" xml:base="https://github.com/pages/colindembovsky/comparing-code-quality-metrics-with-code-security/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#code-security&quot; id=&quot;markdown-toc-code-security&quot;&gt;Code Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#security-for-developers&quot; id=&quot;markdown-toc-security-for-developers&quot;&gt;Security for Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code-quality-metrics&quot; id=&quot;markdown-toc-code-quality-metrics&quot;&gt;Code Quality Metrics&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#can-you-trust-code-quality-metrics&quot; id=&quot;markdown-toc-can-you-trust-code-quality-metrics&quot;&gt;Can You Trust Code Quality Metrics?&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-do-you-care---a-thought-exercise&quot; id=&quot;markdown-toc-when-do-you-care---a-thought-exercise&quot;&gt;When Do You Care - A Thought Exercise&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#quality-vs-code-quality-metrics&quot; id=&quot;markdown-toc-quality-vs-code-quality-metrics&quot;&gt;Quality vs Code Quality Metrics&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#quality-gates&quot; id=&quot;markdown-toc-quality-gates&quot;&gt;Quality Gates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-quality-metrics-over-time&quot; id=&quot;markdown-toc-code-quality-metrics-over-time&quot;&gt;Code Quality Metrics Over Time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-security-over-time&quot; id=&quot;markdown-toc-code-security-over-time&quot;&gt;Code Security Over Time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#consequences&quot; id=&quot;markdown-toc-consequences&quot;&gt;Consequences&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;code-security&quot;&gt;Code Security&lt;/h1&gt;

&lt;p&gt;Code security has traditionally been an “after the fact” activity. Developers would develop, build, test applications, and then when they’re ready to ship to production, attempt to get a security sign-off. This not only isolates developers from security professionals, but this usually ends up either blocking deployments completely or causing teams to deploy vulnerable code with the promise to come back and fix later.&lt;/p&gt;

&lt;p&gt;The irony is that we’ve had security awareness, training and tooling for decades. &lt;a href=&quot;https://owasp.org/&quot;&gt;OWASP&lt;/a&gt; was founded 20 years ago! Tools like Black Duck (2002), Fortify (2003), Veracode (2006) and Checkmarx (2006) are in a rich landscape of security tools. So why are we still seeing so many breaches?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Even Semmle (which was acquired by GitHub and turned into CodeQL) has been around for many years.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Not in my code! Vulnerabilities are in infra,” I hear you state confidently. But the Verizon Data Breach Investigation reports between 2016 and 2020 show that the primary attach vector in breaches is &lt;em&gt;application flaws&lt;/em&gt;. Furthermore, GitHub’s Data Science team analyzed 70 million lines of open source code and showed a linear relationship between lines of code and security threats introduced. In other words, the more code you have, the more potential threats you have.&lt;/p&gt;

&lt;p&gt;Many of these companies have been banging the “shift-left” drum: that is, integrate security earlier into the development life cylce. Still we don’t see drastically more secure code. Why?&lt;/p&gt;

&lt;p&gt;I believe the primary security failure in the industry at the moment is due to the fact that most security tools are build by security professionals for security professionals.&lt;/p&gt;

&lt;h1 id=&quot;security-for-developers&quot;&gt;Security for Developers&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security&quot;&gt;GitHub Advanced Security&lt;/a&gt; (or GHAS) is a game-changer. GHAS is security &lt;em&gt;focused on developers&lt;/em&gt;. By integrating security tooling into the very platform and into the daily workflows developers use, GHAS finally empowers developers to be responsible for security in a natural way.&lt;/p&gt;

&lt;p&gt;I won’t go into all the features of GHAS in this post, but I want to focus on a key component of GHAS and that is integrating in SAST (Static Application Security Testing) into CI/CD using &lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql&quot;&gt;CodeQL&lt;/a&gt; within &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt;, the native GitHub automation engine.&lt;/p&gt;

&lt;p&gt;The beauty of CodeQL is that you can integrate it into your CI/CD workflow &lt;em&gt;without having to write CodeQL queries&lt;/em&gt;. Of course, if you have security professionals on your team or in your organization, they can write custom queries. But even if you don’t, you can tap into the growing suite of &lt;a href=&quot;https://github.com/orgs/codeql/packages&quot;&gt;standard queries&lt;/a&gt; that is constantly being updated by the security community.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: CodeQL can also be &lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs&quot;&gt;configured&lt;/a&gt; to run maintainability and reliability queries by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-and-quality&lt;/code&gt; suite instead of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-extended&lt;/code&gt; suite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;code-quality-metrics&quot;&gt;Code Quality Metrics&lt;/h1&gt;

&lt;p&gt;Many teams try to measure quality through code quality metrics, and there are tools that are good at collecting these metrics - like &lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;SonarQube&lt;/a&gt;. Using SonarQube you can get a grade on how maintainable your code is for example.&lt;/p&gt;

&lt;p&gt;Sounds great - we should all be deploying high quality code, right?&lt;/p&gt;

&lt;h2 id=&quot;can-you-trust-code-quality-metrics&quot;&gt;Can You Trust Code Quality Metrics?&lt;/h2&gt;

&lt;p&gt;There are some problems with code quality metrics. A common code quality metric is &lt;em&gt;cyclomatic complexity&lt;/em&gt; - a measure of how many paths there are through a portion of code. Perhaps we want to ensure that no single file has a cyclomatic complexity higher than 10. Now if a file has a cyclomatic complexity of 11, we &lt;em&gt;might&lt;/em&gt; have a “bad file” - or maybe the logic is just complicated.&lt;/p&gt;

&lt;p&gt;In the “negative” direction, we may or may not agree with the metric result. What about the “positive” direction? If a file has a cyclomatic complexity of 7, does that tell us if the code is good or not?&lt;/p&gt;

&lt;p&gt;You begin to see the problem - if we can’t trust the metrics, then what value do they really have? If we have code that “scores high” in code quality metrics, can we conclude definitively that we have good code?&lt;/p&gt;

&lt;p&gt;In contrast, assuming we have a good security tool like CodeQL that is known to have very low false positive rates, we can most definitely trust the code security alerts. If we run through the CodeQL suite and there are no alerts, we have high confidence in the security of our code!&lt;/p&gt;

&lt;p&gt;Another problem is where (or when) in the lifecycle you really care about code quality metrics. Let me explain it using a hypothetical scenario.&lt;/p&gt;

&lt;h1 id=&quot;when-do-you-care---a-thought-exercise&quot;&gt;When Do You Care - A Thought Exercise&lt;/h1&gt;
&lt;p&gt;Imagine your team is maintaining an application that’s in production and has a solid user base. Let’s imagine it’s an e-commerce site, something like Amazon. Now imagine that you are implementing improvements to the checkout experience to ensure that customers can more easily pay using PayPal. The team has been working on the “PayPal Improvement Feature” for several weeks and are getting ready to deploy. Black Friday is coming, and you know that it’s a huge day for your company and site because of all the specials that you run. Your team has been unit testing and they’ve been running continuous deployment to staging environments and they’ve demonstrated performance is acceptable through integration testing. All systems are a go!&lt;/p&gt;

&lt;p&gt;But suddenly you get a B for some code quality metric. Perhaps the team have been getting A’s so far - but the latest merged code has some code that could be written in an academically better way. Mind you, no tests are failing, and integration and performance testing are all green. What do you do? Are you going to deploy? Or block the deployment until the team has improved the code quality metric from a B to an A?&lt;/p&gt;

&lt;p&gt;Let’s now imagine that your security scans reveal that there is a vulnerability in the latest merged code. Do you still deploy, or get the team to fix the vulnerability?&lt;/p&gt;

&lt;h1 id=&quot;quality-vs-code-quality-metrics&quot;&gt;Quality vs Code Quality Metrics&lt;/h1&gt;

&lt;p&gt;I’m not for a second insinuating that &lt;em&gt;quality&lt;/em&gt; is unimportant. What I’m saying is that, in general, there are diminishing returns on measuring code quality &lt;em&gt;metrics&lt;/em&gt;. We really conflate code quality and code quality metrics, but they are different things.&lt;/p&gt;

&lt;p&gt;Customers that use your code don’t care about your code quality metrics. &lt;em&gt;Performance, reliability, how fast you release new features&lt;/em&gt; - these are the things that your customers really care about (product quality if you will). The question is how many of these are predicted by code quality metrics? In other words, can we definitively say that code with high quality metrics is always performant? Or scalable? Or secure? On the other hand, if our site has good (or even good enough) performance, how much should we care about code quality metrics?&lt;/p&gt;

&lt;h2 id=&quot;quality-gates&quot;&gt;Quality Gates&lt;/h2&gt;

&lt;p&gt;I’ll repeat: I’m not saying that &lt;em&gt;quality&lt;/em&gt; is unimportant. I think that there are other far more effective ways to measure and ensure quality than quality code metrics.&lt;/p&gt;

&lt;p&gt;I have coached many teams that are looking to implement testing that start by attempting to implementing UI testing. After all, they reason, if the test is at the UI layer, then we can ensure quality through the service layer to the data layer - no need to test those separately, right?&lt;/p&gt;

&lt;p&gt;It turns out that this is a trap: different types of testing have different challenges, and differing rates of Return on Investment (ROI). I wrote about this &lt;a href=&quot;/why-you-absolutely-need-to-unit-test/&quot;&gt;here&lt;/a&gt;. Unit tests have a high ROI, since they are usually easy to write and don’t require data or environment management. Integration and Functional tests are more expensive to write and maintain, since you need consistent, stable environments and have to manage test data. UI tests are notoriously fragile. ROI diminishes quickly beyond unit testing.&lt;/p&gt;

&lt;p&gt;In the same manner, the ROI for code quality metrics diminishes over time. Teams can (and should) implement &lt;em&gt;quality gates&lt;/em&gt; to ensure that deployed code meets quality criteria. Assuming you peer-review Pull Requests, implement unit testing, have some Integration and Functional tests, and monitor performance of your code running in production, what real value do code quality metrics add? It definitely has &lt;em&gt;some&lt;/em&gt; usefulness, but I would argue over time its usefulness diminishes over time, especially if you have other quality gates in place.&lt;/p&gt;

&lt;h2 id=&quot;code-quality-metrics-over-time&quot;&gt;Code Quality Metrics Over Time&lt;/h2&gt;

&lt;p&gt;Let me suggest a rough graph showing criticality of Code Quality Metrics over time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/code-quality/code-quality-chart.png&quot; alt=&quot;Criticality of Code Quality Metrics Over Time&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Criticality of Code Quality Metrics over time.&lt;/p&gt;

&lt;p&gt;Any good team is going to enforce quality through mechanisms like &lt;a href=&quot;https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches&quot;&gt;protected branches&lt;/a&gt;, peer code-review, unit tests, automated build and deploy workflows and integration and performance testing. Code quality metrics beyond these will arguably have value before initial deployment, and then taper in criticality over time.&lt;/p&gt;

&lt;h2 id=&quot;code-security-over-time&quot;&gt;Code Security Over Time&lt;/h2&gt;

&lt;p&gt;In contrast, here’s how I think a rough graph of criticality of Code Security looks over time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/11/code-quality/code-security-chart.png&quot; alt=&quot;Criticality of Code Security Over Time&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Criticality of Code Security over time.&lt;/p&gt;

&lt;p&gt;If we assume that your code base is going to grow, and that attackers are going to uncover more vulnerabilities in your dependencies and come up with new attack vectors, we can assume that threats are going to increase over time! So the criticality of code security is going to keep increasing over time. You (or the community) may uncover vulnerabilities in dependencies tomorrow that are thought to be safe today. Constant vigilance is required.&lt;/p&gt;

&lt;h2 id=&quot;consequences&quot;&gt;Consequences&lt;/h2&gt;

&lt;p&gt;We can also contrast the &lt;em&gt;consequences&lt;/em&gt; of code quality metrics and code security being ignored. Going back to our Thought Exercise, you may well decide to deploy code that has a B rating for some Code Quality Metric. Let’s imagine that this causes the PayPal checkout experience to demonstrate some allowable performance impact (like taking .75 seconds instead of .5 seconds to complete). If your quality gate for performance is .8 seconds, you’re still within your performance quality gate, so while you probably do want to fix this at some stage, but the consequences of ignoring this metric are minimal.&lt;/p&gt;

&lt;p&gt;Let’s assume no-one is going to ignore security vulnerabilities that are surfaced through tooling. More likely, teams are not going to be performing code security scanning regularly. But what are the consequences of not ensuring that the PayPal checkout experience is secure? What would the impact be if a customer account is hacked because of a flaw in your code?&lt;/p&gt;

&lt;p&gt;Clearly, the risk presented to not measuring code quality metrics and the risk of not securing code orders of magnitude apart.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Code Quality Metrics are useful, but their criticality typically decreases over time, especially when teams implement good quality gates in their software development life cycle. The criticality of Code Security, on the other hand, steadily increases over time as code bases and attack vectors grow.&lt;/p&gt;

&lt;p&gt;While there is a lot of tooling in both the Code Quality Metrics and Code Security spaces, GitHub Advanced Security offers a unique platform that enables developer-first security, integrating security into developer workflows naturally and seamlessly, making it an indispensable tool for modern software development.&lt;/p&gt;

&lt;p&gt;Happy securing!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="security" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/2021/11/code-quality/matrix.jpeg" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/2021/11/code-quality/matrix.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">On Demand Ephemeral Self-Hosted Runners</title><link href="https://github.com/pages/colindembovsky/on-demand-ephemeral-self-hosted-runners/" rel="alternate" type="text/html" title="On Demand Ephemeral Self-Hosted Runners" /><published>2021-10-26T01:22:01+00:00</published><updated>2021-10-26T01:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/on-demand-ephemeral-self-hosted-runners</id><content type="html" xml:base="https://github.com/pages/colindembovsky/on-demand-ephemeral-self-hosted-runners/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#self-hosted-runners&quot; id=&quot;markdown-toc-self-hosted-runners&quot;&gt;Self-Hosted Runners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-webhooks&quot; id=&quot;markdown-toc-using-webhooks&quot;&gt;Using WebHooks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#on-demand-self-hosted-runners&quot; id=&quot;markdown-toc-on-demand-self-hosted-runners&quot;&gt;On-Demand Self-Hosted Runners&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reusable-workflows&quot; id=&quot;markdown-toc-reusable-workflows&quot;&gt;Reusable Workflows&lt;/a&gt;        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;#deploy-ephemeral-runner&quot; id=&quot;markdown-toc-deploy-ephemeral-runner&quot;&gt;Deploy Ephemeral Runner&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#delete-aci&quot; id=&quot;markdown-toc-delete-aci&quot;&gt;Delete ACI&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-main-workflow&quot; id=&quot;markdown-toc-the-main-workflow&quot;&gt;The Main Workflow&lt;/a&gt;        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;#secrets&quot; id=&quot;markdown-toc-secrets&quot;&gt;Secrets&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#analyzing-the-runs&quot; id=&quot;markdown-toc-analyzing-the-runs&quot;&gt;Analyzing the Runs&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;self-hosted-runners&quot;&gt;Self-Hosted Runners&lt;/h1&gt;

&lt;p&gt;GitHub &lt;a href=&quot;https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners&quot;&gt;hosted runners&lt;/a&gt; are great if you need to run workflows that don’t require special tools or access to protected resources. If you have specific tool requirements, you can install tools as steps within a workflow. However, if custom tool installs take too long, or you have other build/deploy requirements (like license files for 3rd party libraries), you may want to create custom images (containers or VMs) that you can run &lt;a href=&quot;https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners&quot;&gt;self-hosted runners&lt;/a&gt; on. Obviously you’ll need self-hosted runners to deploy to private networks.&lt;/p&gt;

&lt;p&gt;But self-hosted runners mean overhead - you have to maintain them as well as pay for the compute. One technique you could use is to &lt;a href=&quot;https://docs.github.com/en/actions/hosting-your-own-runners/autoscaling-with-self-hosted-runners&quot;&gt;autoscale your self-hosted runners&lt;/a&gt;. However, this requires that you have AKS or use the Terraform/AWS method. What if you want something a little more light-weight?&lt;/p&gt;

&lt;h1 id=&quot;using-webhooks&quot;&gt;Using WebHooks&lt;/h1&gt;

&lt;p&gt;When a workflow is queued, GitHub publishes an event &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_job&lt;/code&gt; (docs &lt;a href=&quot;https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_job&quot;&gt;here&lt;/a&gt;). Initially when thinking about this scenario, I explored creating a workflow that would trigger off this event and spin up a self-hosted runner.&lt;/p&gt;

&lt;p&gt;Unfortunately, most, but not &lt;em&gt;all&lt;/em&gt; GitHub events trigger workflows. You can create a webhook to listen for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_job&lt;/code&gt; and then call a REST API - but then you’d have to host something capable of processing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; from the webhook, which could then turn around and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repository_webhook&lt;/code&gt; event of a workflow. Sounds like more overhead to manage!&lt;/p&gt;

&lt;p&gt;Instead of doing this, I realized that I could create a reusable workflow to spin up (and another to tear down) a self-hosted runner. In this manner, I’d be spinning up a self-hosted runner &lt;em&gt;on demand&lt;/em&gt; and tearing it down afterwards to save overhead and compute.&lt;/p&gt;

&lt;h1 id=&quot;on-demand-self-hosted-runners&quot;&gt;On-Demand Self-Hosted Runners&lt;/h1&gt;

&lt;p&gt;In this post, I’ll walk you through this scenario. The idea is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When a workflow runs, execute a job on a hosted runner that spins up a self-hosted runner using Azure Container Instances (ACI) connected to a specific VNet, registering the runner as &lt;a href=&quot;https://docs.github.com/en/actions/hosting-your-own-runners/autoscaling-with-self-hosted-runners#using-ephemeral-runners-for-autoscaling&quot;&gt;ephemeral&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Execute the “real” work, targeting the self-hosted runner that was just created&lt;/li&gt;
  &lt;li&gt;When the job completes, the runner unregisters from the repo (since it was created as an ephemeral runner)&lt;/li&gt;
  &lt;li&gt;Execute a clean-up job that deletes the ACI&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this manner, you get the experience of a hosted runner, but the “real” work is performed on a self-hosted runner that is spun up on-demand in your private VNet. You sacrifice a little bit of time (it takes some time to spin up the ACI) but in return you decrease overhead, since the ACI only lives just long enough to execute the work - there’s nothing to manage after the job completes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: You also have to maintain the container image, but if you’re not frequently messing with the tools, this is usually not a lot of overhead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The GitHub PAT required by the self-hosted runner is &lt;strong&gt;VISIBLE on the config of the ACI in the Azure Portal or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt;&lt;/strong&gt;. Ensure that you set up appropriate RBAC to prevent leaking this credential!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Code for this post can be found in &lt;a href=&quot;https://github.com/colindembovsky/scaling-self-hosted-aci&quot;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;In order for this to work, you’ll need a container image that, when started, will register an ephemeral runner. That image should then be customized to install any further custom build or deploy tools that you may need. You can see this &lt;a href=&quot;https://github.com/colindembovsky/github-actions-runner-container&quot;&gt;example repo&lt;/a&gt; that builds a container image that registers a self-hosted runner when the container is started. That repo includes a workflow that will build the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and publish the image to GitHub Container Registry (GHCR).&lt;/p&gt;

&lt;p&gt;Secondly, you need to create a resource group for housing the ACI instances and to create an SPN that has permissions to create resources in the resource group.&lt;/p&gt;

&lt;p&gt;Finally, you need to get the ID of the subnet that you want to connect your runner to. If you’re deploying to private VNets, this is an essential step.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: You could customize the code so that the subnet is not required - this will just spin an ACI that is not connected to any specific VNet. You’d then have a self-hosted runner running on your custom image, but it won’t be connected to any private VNets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reusable-workflows&quot;&gt;Reusable Workflows&lt;/h2&gt;

&lt;p&gt;There are two &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/reusing-workflows&quot;&gt;reusable workflows&lt;/a&gt; in this scenario: one to spin up an ACI that connects a self-hosted runner to the invoking workflow’s repository. The second deletes the ACI. We don’t have to worry about unregistering the runner, since we’ll spin the runner using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ephemeral&lt;/code&gt; switch, which automatically unregisters the runner after it has completed a single job.&lt;/p&gt;

&lt;p&gt;Both workflows execute using hosted runners. The hosted runners simply spin up (and tear down) the ephemeral self-hosted runner: but it is the self-hosted runner that is doing the “real” work.&lt;/p&gt;

&lt;h3 id=&quot;deploy-ephemeral-runner&quot;&gt;Deploy Ephemeral Runner&lt;/h3&gt;

&lt;p&gt;The code for the deployment workflow is as follows:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'deploy-ephemeral-runner.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy Ephemeral Runner&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rg_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of RG to deploy to&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd-ephemeral&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Location for ACI&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;southcentralus&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;subnet_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Subnet to create ACI on&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/subscriptions/f12d732d-4a47-4edc-a11b-d6dc6909ddbe/resourceGroups/cd-ephemeral/providers/Microsoft.Network/virtualNetworks/private-vnet/subnets/default&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;aci_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix for ACI name&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd-shrunner-aci&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runner_image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Image of runner container&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ghcr.io/colindembovsky/ubuntu-actions-runner:6d7a59dfa95ec094a5fa8292bad01158c374e3ad&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Comma-separated list of labels to apply to the runner&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;azure_creds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure credentials&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;repo_pat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PAT with `repo` permissions&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy_runner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy Ephemeral Runner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Login to Azure&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;azure/login@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.azure_creds }}&lt;/span&gt;
    
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Create runner&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az container create \&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;-g ${{ inputs.rg_name }} -n ${{ inputs.aci_prefix }}-${{ github.run_id }} \&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;--image ${{ inputs.runner_image }} --restart-policy Never \&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;--subnet ${{ inputs.subnet_id }} \&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;--environment-variables \&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;RUNNER_REPOSITORY_URL=https://github.com/${{ github.repository }} \&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;GITHUB_TOKEN=${{ secrets.repo_pat }} \&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;RUNNER_OPTIONS=&quot;--ephemeral&quot; \&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;RUNNER_LABELS=${{ inputs.labels }} \&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;RUNNER_NAME=${{ inputs.aci_prefix }}-${{ github.run_id }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Workflow to deploy an ephemeral self-hosted runner to ACI.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; trigger in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; section to indicate that this is a reusable workflow.&lt;/li&gt;
  &lt;li&gt;We include an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; for specifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rg_name&lt;/code&gt; (resource group name), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subnet_id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aci_prefix&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runner_image&lt;/code&gt;. Most inputs are self-explanatory - we’ll append the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_id&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aci_prefix&lt;/code&gt; to ensure a unique ACI per workflow run.&lt;/li&gt;
  &lt;li&gt;We need to pass in two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure_creds&lt;/code&gt; (to authenticate to Azure) as well as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo_pat&lt;/code&gt; which is a GitHub Personal Access Token (PAT) that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo&lt;/code&gt; priveledges. We need this to register the runner to the repo.&lt;/li&gt;
  &lt;li&gt;The first step authenticates to Azure.&lt;/li&gt;
  &lt;li&gt;The second step uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az container create&lt;/code&gt; to create the ACI using the inputs provided. A few callouts: we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--restart-policy&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Never&lt;/code&gt; since we don’t want the container to restart when the runner unregisters after completing a job. We attache the ACI to the specified subnet via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subnet&lt;/code&gt; argument. Finally, we pass in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ephemeral&lt;/code&gt; to mark the runner as ephemeral.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;delete-aci&quot;&gt;Delete ACI&lt;/h3&gt;

&lt;p&gt;To delete the ACI after the runner has unregistered, we can use this reusable workflow:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'delete-aci.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Delete ACI&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rg_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of RG to deploy to&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd-ephemeral&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;aci_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix for ACI name&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd-shrunner-aci&lt;/span&gt;
        
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;azure_creds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Azure credentials&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;delete_aci&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Delete ACI&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;azure/login@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.azure_creds }}&lt;/span&gt;
    
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Delete ACI&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;az container delete -g ${{ inputs.rg_name }} -n ${{ inputs.aci_prefix }}-${{ github.run_id }} --yes&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Workflow to delete the ACI.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We pass in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rg_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aci_prefix&lt;/code&gt; just like we did for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy ACI&lt;/code&gt; workflow.&lt;/li&gt;
  &lt;li&gt;We pass in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure_creds&lt;/code&gt; to authenticate to Azure.&lt;/li&gt;
  &lt;li&gt;After logging in to Azure, we invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az container delete&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--yes&lt;/code&gt; to delete the ACI completely.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Just a reminder: at this stage, the runner has unregistered itself and the container is no longer running. We’re just cleaning up the ACI to ensure we are not billed for compute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-main-workflow&quot;&gt;The Main Workflow&lt;/h2&gt;

&lt;p&gt;Now that we have automation to spin up the ACI and tear it down, we can incorporate these jobs into our “main” workflow:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'work.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Do Some Work&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# deploy a runner for the job&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy_runner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colindembovsky/scaling-self-hosted-aci/.github/workflows/deploy-ephemeral-runner.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;uniqueString&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;azure_creds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;repo_pat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REPO_PAT }}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# do the real work&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy_runner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self-hosted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;uniqueString&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Simulate some work&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sleep 10&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;delete_aci&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ always() }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colindembovsky/scaling-self-hosted-aci/.github/workflows/delete-aci.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;azure_creds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;The main workflow.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We invoke the deploy runner workflow which spins up a self-hosted runner in an ACI connected to our private VNet. To make sure that our job targets the correct runner, we add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;labels&lt;/code&gt; value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uniqueString&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; job, we target any runner that has labels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self-hosted&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uniqueString&lt;/code&gt; (there should only be the one).&lt;/li&gt;
  &lt;li&gt;Steps executed here run on the self-hosted runner, that is connected to our private VNet, so it should be able to access resource on this VNet and any peered VNets.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_aci&lt;/code&gt; job invokes the reusable workflow to clean up the ACI after the job complets. We add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if: $&lt;/code&gt; to ensure that the job executes even if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; job fails.&lt;/li&gt;
  &lt;li&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;needs&lt;/code&gt; to specify the ordering: first create the ACI hosting the runner, then execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; and then only delete the ACI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;secrets&quot;&gt;Secrets&lt;/h3&gt;

&lt;p&gt;In order for this to work, you’ll need to configure &lt;a href=&quot;https://github.com/marketplace/actions/azure-login&quot;&gt;Azure Credentials&lt;/a&gt; to the SPN that can create resources in the resource group and that has permissions to add interfaces to the subnet. You’ll also need to generate a GitHub PAT that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo&lt;/code&gt; priveledges.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-runs&quot;&gt;Analyzing the Runs&lt;/h2&gt;

&lt;p&gt;If you run the above workflow, you’ll have a small window of time where you can see the self-hosted runner (navigate to &lt;strong&gt;Settings-&amp;gt;Actions-&amp;gt;Runners&lt;/strong&gt; on the repo):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/10/self-hosted-runners/runner-registered.png&quot; alt=&quot;Self-hosted runner registered after the ACI spins up&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Self-hosted runner registered after the ACI spins up.&lt;/p&gt;

&lt;p&gt;When the job completes, the runner unregisters itself and is no longer listed. Similarly, if you look at your Azure subscription, you’ll see the ACI spin up. If you click &lt;strong&gt;Containers&lt;/strong&gt; and check the logs for the container, you’ll see the runner register and wait for jobs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/10/self-hosted-runners/runner-aci-ready.png&quot; alt=&quot;Logs in ACI after spinning up&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Logs in ACI after spinning up.&lt;/p&gt;

&lt;p&gt;Once the job completes, the runner automatically unregisters. Again, looking at the logs you’ll see this operation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/10/self-hosted-runners/runner-unregistered.png&quot; alt=&quot;Logs after completing the job&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Logs after completing the job.&lt;/p&gt;

&lt;p&gt;The ACI is then removed to complete the workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/10/self-hosted-runners/workflow-completed.png&quot; alt=&quot;Completed workflow&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;The completed workflow. The “work” was to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleep 120&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looking at the jobs, I recorded spinning the ACI took about 90 - 180 seconds. Tear down took approximately 30 seconds. All in all, we’re adding about 2 minutes total time to the job, but we don’t have any infrastructure to manage once the jobs complete. Not too bad to get an “on-demand” self-hosted agent!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Hosted runners provide a very low overhead mechanism for running Actions. However, there are times when you need custom images or when you’re targeting private VNets, and in those situations you need to run a self-hosted agent. But this requires that you manage a container runtime (like Kubernetes) or manage VMs. However, if you are looking to deploy to private VNets or run jobs on custom images without having to manage long-lived runners, then using ACI to host ephemeral runners is a viable “on-demand” solution.&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="actions" /><category term="build" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/2021/10/self-hosted-runners/boom.jpeg" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/2021/10/self-hosted-runners/boom.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Musings on GitHub Actions Reusable Workflows</title><link href="https://github.com/pages/colindembovsky/musings-on-reusable-workflows/" rel="alternate" type="text/html" title="Musings on GitHub Actions Reusable Workflows" /><published>2021-10-05T01:22:01+00:00</published><updated>2021-10-05T01:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/musings-on-reusable-workflows</id><content type="html" xml:base="https://github.com/pages/colindembovsky/musings-on-reusable-workflows/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#motivation-for-reusable-workflows&quot; id=&quot;markdown-toc-motivation-for-reusable-workflows&quot;&gt;Motivation for Reusable Workflows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#limitations&quot; id=&quot;markdown-toc-limitations&quot;&gt;Limitations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#making-a-workflow-reusable&quot; id=&quot;markdown-toc-making-a-workflow-reusable&quot;&gt;Making a Workflow Reusable&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#add-the-call-trigger&quot; id=&quot;markdown-toc-add-the-call-trigger&quot;&gt;Add the Call Trigger&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#enable-actions-access-on-the-repo&quot; id=&quot;markdown-toc-enable-actions-access-on-the-repo&quot;&gt;Enable Actions Access on the Repo&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-reusable-dotnet-build-test-and-publish-workflow&quot; id=&quot;markdown-toc-creating-a-reusable-dotnet-build-test-and-publish-workflow&quot;&gt;Creating a Reusable DotNet Build, Test and Publish Workflow&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#parameterize-the-platform&quot; id=&quot;markdown-toc-parameterize-the-platform&quot;&gt;Parameterize the Platform&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parameterize-the-source-directory&quot; id=&quot;markdown-toc-parameterize-the-source-directory&quot;&gt;Parameterize the Source Directory&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parameterize-running-tests&quot; id=&quot;markdown-toc-parameterize-running-tests&quot;&gt;Parameterize Running Tests&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#publish-the-app&quot; id=&quot;markdown-toc-publish-the-app&quot;&gt;Publish the App&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#putting-it-all-together&quot; id=&quot;markdown-toc-putting-it-all-together&quot;&gt;Putting it all together&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#invoking-the-workflow&quot; id=&quot;markdown-toc-invoking-the-workflow&quot;&gt;Invoking the Workflow&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#array-hack&quot; id=&quot;markdown-toc-array-hack&quot;&gt;Array Hack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#secrets&quot; id=&quot;markdown-toc-secrets&quot;&gt;Secrets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/reusing-workflows&quot;&gt;Reusable workflows&lt;/a&gt; have just been released to beta. Some level of reuse has been possible previously using &lt;a href=&quot;https://docs.github.com/en/actions/creating-actions/creating-a-composite-action&quot;&gt;Composite Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote about Composite Actions and some of their limitations &lt;a href=&quot;/github-composite-actions/&quot;&gt;here&lt;/a&gt;. In that post I also compared Composite Actions to Azure Pipeline &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; templates. Reusable workflows are akin to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job&lt;/code&gt; templates in Azure Pipelines.&lt;/p&gt;

&lt;h2 id=&quot;motivation-for-reusable-workflows&quot;&gt;Motivation for Reusable Workflows&lt;/h2&gt;

&lt;p&gt;Reusable workflows allow you to centralize a set of common jobs. For example, you may have a common job for “Build a .NET application”. You may have a common job for “Deploy a Web App to Azure Web Apps”. Instead of each repo having the same set of steps for these common jobs, you can now create a centralized repo (or set of repos) that can be reused.&lt;/p&gt;

&lt;p&gt;This keeps your workflows DRY (Don’t Repeat Yourself) and allows you to change a workflow in a single place. Since you can pin to a tag or branch when &lt;em&gt;referencing&lt;/em&gt; a reusable workflow, you can ensure that you maintain backward compatibility.&lt;/p&gt;

&lt;p&gt;Many organizations have a “DevOps Team”. I really don’t like this terminology, since I think DevOps should be everyone’s resposibility, not just fobbed off to some other team. However, in practice, many organizations have teams that write application code and have other teams that are focused on automating building, testing, securing and deploying that code. Reusable workflows is great for these teams.&lt;/p&gt;

&lt;p&gt;For teams that are building their own automation, they can still benefit from a centralized location for reusable workflows. In this case, anyone could contribute to the workflows, where organizations with “DevOps teams” may want only the DevOps teams to be able to contribute to the workflows. In the end, this becomes a &lt;em&gt;process&lt;/em&gt; question rather than a tooling question - you can set permissions (or lack of permissions) on the centralized repos however you like.&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;There are still some limitations to reusable wofklows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Reusable workflows only run on &lt;em&gt;hosted&lt;/em&gt; runners, not yet on &lt;em&gt;private&lt;/em&gt; runners.&lt;/del&gt; &lt;strong&gt;Update&lt;/strong&gt;: Reusable workflows are supported on self-hosted runners now (10/14/2021)!&lt;/li&gt;
  &lt;li&gt;Reusable workflows cannot call other reusable workflows.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;You cannot access job outputs from reusable workflows.&lt;/del&gt; &lt;strong&gt;Update&lt;/strong&gt;: You can now declare &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outputs&lt;/code&gt; to reusable workflows. These work just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job&lt;/code&gt; outputs and are available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;needs.&amp;lt;reusable&amp;gt;.outputs.&amp;lt;output&amp;gt;&lt;/code&gt; format once you declare the output.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; variables set in the calling workflow are not accessible to the called workflow.&lt;/li&gt;
  &lt;li&gt;The only parameter types that are supported are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt;. Arrays are not supported.&lt;/li&gt;
  &lt;li&gt;You cannot pass in steps to inject (like you can with Azure Pipelines templates).&lt;/li&gt;
  &lt;li&gt;Repos that contain reusable workflows must be either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;internal&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You cannot enforce use of a reusable workflow. In other words, there is no equivalent for &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#extend-from-a-template&quot;&gt;extends templates&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These limitations mean that reusable workflows are nowhere near as powerful as Azure Pipeline templates, but it’s a step in the right direction for Actions. At the very least, reusable workflows minimized copy/paste for simple scenarios.&lt;/p&gt;

&lt;h2 id=&quot;making-a-workflow-reusable&quot;&gt;Making a Workflow Reusable&lt;/h2&gt;

&lt;h3 id=&quot;add-the-call-trigger&quot;&gt;Add the Call Trigger&lt;/h3&gt;
&lt;p&gt;Making a workflow reusable is not too hard - you just add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; trigger, with some optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; trigger allows your workflow to be called by other workflows, and obviously you can pass values for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; keyword, just like any other Action.&lt;/p&gt;

&lt;h3 id=&quot;enable-actions-access-on-the-repo&quot;&gt;Enable Actions Access on the Repo&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; trigger makes the workflow callable, but you still need to allow access. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings-&amp;gt;Actions&lt;/code&gt; tab of your repo, scroll to the bottom and enable the desired level of access:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2021/10/actions-access.png&quot; alt=&quot;Setting Actions Access level on a repo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Setting Actions Access level on a repo.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-reusable-dotnet-build-test-and-publish-workflow&quot;&gt;Creating a Reusable DotNet Build, Test and Publish Workflow&lt;/h2&gt;

&lt;p&gt;Imagine you have a standard way of building and testing dotnet applications. Before reusable workflows, you would have had to copy/paste a workflow to every dotnet repo. Now you can set up a single workflow that can be reused. Let’s take a look at an example:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'simple-build.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet application&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Version of dotnet to use&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.0.x&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup .NET&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-dotnet@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.dotnet-version }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Restore dependencies&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet restore&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet test --no-build --verbosity normal&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;A simple workflow to build a dotnet application.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_call&lt;/code&gt; trigger in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; section to indicate that this is a reusable workflow.&lt;/li&gt;
  &lt;li&gt;We include an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; called  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet-version&lt;/code&gt; with some metadata as well as a default value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.0.x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The steps are really easy: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; the code, setup the specified version of dotnet and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;restore&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far so good. Let’s enhance this workflow to add in some more functionality.&lt;/p&gt;

&lt;h3 id=&quot;parameterize-the-platform&quot;&gt;Parameterize the Platform&lt;/h3&gt;

&lt;p&gt;Let’s parameterized the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on&lt;/code&gt; so that we can pass in the hosted or private pool we want to run the workflow on:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Platform to execute on&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.runs-on }}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on&lt;/code&gt; input.&lt;/p&gt;

&lt;h3 id=&quot;parameterize-the-source-directory&quot;&gt;Parameterize the Source Directory&lt;/h3&gt;

&lt;p&gt;What if the project file isn’t in the root directory of the repo? Many teams put the app code into a folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; or have a mono-repo with several apps in different folders. Not a problem - we can add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project-folder&lt;/code&gt; input and set that as the default working directory:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;project-folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The folder containing the project to build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.runs-on }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.project-folder }}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project-folder&lt;/code&gt; input.&lt;/p&gt;

&lt;h3 id=&quot;parameterize-running-tests&quot;&gt;Parameterize Running Tests&lt;/h3&gt;

&lt;p&gt;What if there are no tests to run or we don’t want to run them because they take too long? We can add a boolean parameter and skip the test step if this value is false:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;run-tests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run tests&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;boolean&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.test }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet test --no-build --verbosity normal&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run-tests&lt;/code&gt; boolean input.&lt;/p&gt;

&lt;h3 id=&quot;publish-the-app&quot;&gt;Publish the App&lt;/h3&gt;

&lt;p&gt;What if we want to publish the compiled app, and specify the configuration and name of the published artifact? No problem.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;publish-configuration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Configuration to publish&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Release&lt;/span&gt;
        
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of the artifact to upload&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Publish&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet publish -c ${{ inputs.publish-configuration }} -o wdrop&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload a Build Artifact&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-artifact@v2.2.2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.artifact-name }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.project-folder }}/wdrop/**&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if-no-files-found&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;error&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Adding steps and inputs for publishing.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;The final workflow looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'completed-dotnet-build.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet application&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Platform to execute on&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
        
      &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Version of dotnet to use&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.0.x&lt;/span&gt;
      
      &lt;span class=&quot;na&quot;&gt;project-folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The folder containing the project to build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
        
      &lt;span class=&quot;na&quot;&gt;run-tests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run tests&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;boolean&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      
      &lt;span class=&quot;na&quot;&gt;publish-configuration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Configuration to publish&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Release&lt;/span&gt;
        
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name of the artifact to upload&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.runs-on }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.project-folder }}&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup .NET&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-dotnet@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.dotnet-version }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Restore dependencies&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet restore&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.test }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet test --no-build --verbosity normal&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Publish&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet publish -c ${{ inputs.publish-configuration }} -o wdrop&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload a Build Artifact&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-artifact@v2.2.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.artifact-name }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.project-folder }}/wdrop/**&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;if-no-files-found&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;error&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;The final workflow.&lt;/p&gt;

&lt;h3 id=&quot;invoking-the-workflow&quot;&gt;Invoking the Workflow&lt;/h3&gt;
&lt;p&gt;Now that we have a reusable workflow, how do we invoke it? It’s pretty easy - almost like invoking an Action. In the code repo, we can add a new workflow that just invokes the centralized workflow we created:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'build.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build application&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build-ubuntu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build app on Ubuntu&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;octodemo/colind-reusable-workflows/.github/workflows/dotnetbuild.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run-tests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;project-folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;artifact-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;drop-ubuntu&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Invoking the reusable workflow.&lt;/p&gt;

&lt;p&gt;We declare a job (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-ubuntu&lt;/code&gt;) and then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uses&lt;/code&gt; to specify the job template. We use the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;owner/repo/path@label&lt;/code&gt; to specify the exact location and version of the workflow. Then we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; keyword to specify values for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;array-hack&quot;&gt;Array Hack&lt;/h2&gt;
&lt;p&gt;I love being able to pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stepLists&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobLists&lt;/code&gt;) in Azure Pipelines (see &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#parameter-data-types&quot;&gt;this doc&lt;/a&gt;). This allows you to create generic templates that allow some customization of pre- or post-actions. You could have a template that build an app, allowing some post-build steps to copy files to a location or something along those lines. Unfortunately there is no equivalent in Actions. Even passing arrays of primitives requires a hack.&lt;/p&gt;

&lt;p&gt;Let’s say you wanted to build the dotnet app on different platforms using a matrix, and you wanted to pass in a list of the platforms. There is no way to pass a list of values into a reusable workflow. But we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromJSON&lt;/code&gt; and pass in a JSON string:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'build-template.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;nname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet application&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Platforms to execute on, in format of a string JSON array&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&quot;ubuntu-latest&quot;]'&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build dotnet app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ fromJSON(inputs.runs-on) }}&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.runs-on }}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Creating a JSON string input and parsing it for a matrix.&lt;/p&gt;

&lt;p&gt;Then we pass in the JSON string array when we invoke the workflow:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'build-app.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build Matrix&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build-ubuntu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build app on matrix&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;octodemo/colind-reusable-workflows/.github/workflows/build-matrix.yml@main&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&quot;ubuntu-latest&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;windows-latest&quot;]'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run-tests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;project-folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Invoking a workflow with a JSON array parameter.&lt;/p&gt;

&lt;p&gt;You can see the value that we pass to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on&lt;/code&gt;: it’s a JSON array that has been stringified.&lt;/p&gt;

&lt;p&gt;This is definitely hacky, but it’s probably the only way to pass a list to a reusable workflow. And it won’t work for injecting steps.&lt;/p&gt;

&lt;h2 id=&quot;secrets&quot;&gt;Secrets&lt;/h2&gt;

&lt;p&gt;If you want to pass secrets to a reusable workflow, you should use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; keyword. These are really the same as inputs, but instead of being plaintext, they are treated as secrets. Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'reusable.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_call&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/actions/some-authenticated-action@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.username }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.token }}&lt;/span&gt;      

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Defining a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret&lt;/code&gt; input to a reusable workflow.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'caller.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-org/my-workflow-repo./.github/workflows/reusable.yml@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.actor }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.token }}&lt;/span&gt;      

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Invoking a reusable workflow with a secret.&lt;/p&gt;

&lt;p&gt;You can see how the secret &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; is passed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uses&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Reusable Workflows are a great evolution for GitHub Actions. They can drastically reduce redundancy in your workflows and start paving the way for some centralized templates that can be used to standardize jobs in an org. While they have limitations, they are still powerful tools to add to your toolbelt.&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="actions" /><category term="build" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/2021/10/reuse.jpeg" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/2021/10/reuse.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Create Azure DevOps Work Item Action</title><link href="https://github.com/pages/colindembovsky/azdo-create-work-item-action/" rel="alternate" type="text/html" title="Create Azure DevOps Work Item Action" /><published>2021-09-01T17:22:01+00:00</published><updated>2021-09-01T17:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/azdo-create-work-item-action</id><content type="html" xml:base="https://github.com/pages/colindembovsky/azdo-create-work-item-action/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#azure-devops-work-item-creation-action&quot; id=&quot;markdown-toc-azure-devops-work-item-creation-action&quot;&gt;Azure DevOps Work Item Creation Action&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#setting-up-a-skeleton&quot; id=&quot;markdown-toc-setting-up-a-skeleton&quot;&gt;Setting up a Skeleton&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#coding-the-action&quot; id=&quot;markdown-toc-coding-the-action&quot;&gt;Coding the Action&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#authentication&quot; id=&quot;markdown-toc-authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-work-item&quot; id=&quot;markdown-toc-creating-a-work-item&quot;&gt;Creating a Work Item&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tying-it-all-together&quot; id=&quot;markdown-toc-tying-it-all-together&quot;&gt;Tying It All Together&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#publishing-the-action&quot; id=&quot;markdown-toc-publishing-the-action&quot;&gt;Publishing the Action&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-pr-boards-work-item&quot; id=&quot;markdown-toc-creating-a-pr-boards-work-item&quot;&gt;Creating a PR Boards Work Item&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Azure Boards is a mature product for managing backlogs. Many teams are using Boards even while hosting code in GitHub, and using GitHub Actions for CI/CD.&lt;/p&gt;

&lt;p&gt;There may be scenarios where you want to create a work item on Azure Boards from within an Action:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;when a Pull Request is created&lt;/li&gt;
  &lt;li&gt;when particular tests fail&lt;/li&gt;
  &lt;li&gt;when a deployment is commencing or completing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we look at one of these scenarios, let’s have a look at how I created an Action that can create an Azure DevOps Work Item.&lt;/p&gt;

&lt;h2 id=&quot;azure-devops-work-item-creation-action&quot;&gt;Azure DevOps Work Item Creation Action&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt; just go to the Action in the &lt;a href=&quot;https://github.com/marketplace/actions/create-azdo-work-item&quot;&gt;markeplace&lt;/a&gt; to start using it in your workflows!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;setting-up-a-skeleton&quot;&gt;Setting up a Skeleton&lt;/h3&gt;

&lt;p&gt;I really prefer developing Actions with TypeScript, so I found the &lt;a href=&quot;https://github.com/actions/typescript-action&quot;&gt;TypeScript Action template repo&lt;/a&gt; and created a repo from the template. This set up a skeleton Action that I could work from. I then opened the Action in a &lt;a href=&quot;https://github.com/features/codespaces&quot;&gt;CodeSpace&lt;/a&gt; and I was developing! I switched from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn&lt;/code&gt; but that’s not something you have to do.&lt;/p&gt;

&lt;h3 id=&quot;coding-the-action&quot;&gt;Coding the Action&lt;/h3&gt;

&lt;p&gt;Next I added the &lt;a href=&quot;https://www.npmjs.com/package/azure-devops-node-api&quot;&gt;azure-devops-node-api&lt;/a&gt; so that I could easily interact with the Azure DevOps REST API. In the &lt;a href=&quot;https://github.com/colindembovsky/az-create-work-item/blob/main/src/main.ts&quot;&gt;main.ts&lt;/a&gt; file, I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.getInput()&lt;/code&gt; to parse the inputs (which I specify in the &lt;a href=&quot;https://github.com/colindembovsky/az-create-work-item/blob/main/action.yml&quot;&gt;action.yml&lt;/a&gt; file). I then just call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createWorkItem()&lt;/code&gt; method in a separate &lt;a href=&quot;https://github.com/colindembovsky/az-create-work-item/blob/main/src/work-item-functions.ts&quot;&gt;work-item-functions.ts&lt;/a&gt; file.&lt;/p&gt;

&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;The client library makes authenticating fairly easy, assuming you have an org name and a Personal Access Token (PAT). Here’s the method I created to authenticate and get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkItemTrackingClient&lt;/code&gt;, which has methods for interacting with work items:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// file: 'work-item-functions.ts'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IWorkItemTrackingApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orgUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://dev.azure.com/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Connecting to &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orgUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;azdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPersonalAccessTokenHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;azdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WebApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orgUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Connected successfully to &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orgUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWorkItemTrackingApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Authenticating with Azure DevOps&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We first instantiate an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationHandler&lt;/code&gt;, in this case, a PAT handler, passing in the token&lt;/li&gt;
  &lt;li&gt;Then we instanticate the connection, passing in the org URL and the handler&lt;/li&gt;
  &lt;li&gt;Finally, we get and return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkItemTrackingClient&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;creating-a-work-item&quot;&gt;Creating a Work Item&lt;/h3&gt;

&lt;p&gt;Once we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkItemTrackingClient&lt;/code&gt;, we can manipulate work items in Azure DevOps. Let’s look at the method that creates a work item:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// file: 'work-item-functions.ts'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createWorkItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IWorkItemInfo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Try get work item client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wiClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Got work item client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patchDoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/fields/System.Title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/fields/System.Description&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JsonPatchDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;areaPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patchDoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/fields/System.AreaPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;areaPath&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patchDoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/fields/System.IterationPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterationPath&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Calling create work item...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWorkItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;patchDoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;workItemInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Work item was not created&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Creating an Azure DevOps Work Item&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First we get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkItemTrackingClient&lt;/code&gt; from the method we created earlier&lt;/li&gt;
  &lt;li&gt;Next, we construct a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JsonPatchDocument&lt;/code&gt; which contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operations&lt;/code&gt; - in this case, all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt;s. This is how we create the field values for the new work item.&lt;/li&gt;
  &lt;li&gt;Finally, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createWorkItem&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkItemTrackingClient&lt;/code&gt; to create the work item. We then return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; of the new work item.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tying-it-all-together&quot;&gt;Tying It All Together&lt;/h3&gt;
&lt;p&gt;When invoked, the Action will execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; file, in which we just extract the input args and invoke the methods we created earlier:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// file: 'main.ts'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@actions/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWorkItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./work-item-functions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;areaPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;areaPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;iterationPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;iterationPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`orgName: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`project: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`type: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`title: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`description: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`areaPath: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;areaPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`iterationPath: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterationPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Creating new work item...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createWorkItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;areaPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;iterationPath&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Created work item [&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] with id &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;workItemId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;The main code for the Action.&lt;/p&gt;

&lt;h3 id=&quot;publishing-the-action&quot;&gt;Publishing the Action&lt;/h3&gt;
&lt;p&gt;I said that the Action invokes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; - this isn’t entirely correct. If you look at the &lt;a href=&quot;https://github.com/colindembovsky/az-create-work-item/blob/main/action.yml&quot;&gt;action.yml&lt;/a&gt; file, you’ll see the following metadata:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'action.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node12'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dist/index.js'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Metadata snippet for specifying Action exection.&lt;/p&gt;

&lt;p&gt;You’ll see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; property is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist/index.js&lt;/code&gt;. This file is generated by packaging the Action. This is set up for you already if you create the Action from the template repo like I did. Looking in &lt;a href=&quot;https://github.com/colindembovsky/az-create-work-item/blob/main/package.json&quot;&gt;pacakge.json&lt;/a&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts&lt;/code&gt; section, we see the following:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tsc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write **/*.ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;format-check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --check **/*.ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint src/**/*.ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;package&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ncc build --source-map --license licenses.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn run build &amp;amp;&amp;amp; yarn run format &amp;amp;&amp;amp; yarn run lint &amp;amp;&amp;amp; yarn run package&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;Scripts specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;Note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; script: it runs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; script for transpiling, then runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint&lt;/code&gt; for formatting and linting and finally runs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package&lt;/code&gt; command. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package&lt;/code&gt; command invokes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ncc&lt;/code&gt; to package the Action and make it ready for publication. After these commands have run, the TypeScript has been transpiled, formatted and linted into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: For now, I’m running this manually before committing, but ideally I should have an Action that will run this command on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; and commit the generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder automatically - that way I’ll never be out of sync!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;creating-a-pr-boards-work-item&quot;&gt;Creating a PR Boards Work Item&lt;/h2&gt;

&lt;p&gt;Let’s imagine that you want to create a work item whenever a PR is created. This is actually quite easy now that we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az-create-work-item&lt;/code&gt; Action:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# file: 'pr.yml'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;opened&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;create-work-item&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;prNum=$(jq --raw-output .pull_request.number &quot;$GITHUB_EVENT_PATH&quot;)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo &quot;::set-env name=prNum::$prNum&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Exract PR number&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colindembovsky/az-create-work-item@v1.0.0&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.AZDO_TOKEN }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;orgName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myorg&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myproject&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;User Story&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PR ${{ env.prNum }} in repository ${{ github.repository }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;div&amp;gt;A&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Pull&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;href=&quot;https://github.com/${{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;env.repository&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}/pulls/${{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;env.prNum&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;figcaption&quot;&gt;An example of creating a Work Item in AzDO when a PR is created.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You can specify “sub-events” for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull_request&lt;/code&gt; trigger. In this case, we filter down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opened&lt;/code&gt; type.&lt;/li&gt;
  &lt;li&gt;We execute two steps: the first extracts the PR number from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GITHUB_EVENT_PATH&lt;/code&gt; metadata.&lt;/li&gt;
  &lt;li&gt;The second step invokes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az-create-work-item&lt;/code&gt; Action to create the work item.&lt;/li&gt;
  &lt;li&gt;For this to work, we need to provide an Azure DevOps PAT and we store it as a repository secret called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZDO_TOKEN&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Creating Azure DevOps work items by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az-create-work-item&lt;/code&gt; Action is fairly simple. Many teams are using both GitHub and Azure DevOps, and commonly this involves planning and tracking in Azure Boards. This Action allows teams to easily create work items in Azure Boards from Actions.&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="actions" /><category term="devops" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/posts/azdo.png" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/posts/azdo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GitHub Composite Actions</title><link href="https://github.com/pages/colindembovsky/github-composite-actions/" rel="alternate" type="text/html" title="GitHub Composite Actions" /><published>2021-09-01T17:22:01+00:00</published><updated>2021-09-01T17:22:01+00:00</updated><id>https://github.com/pages/colindembovsky/github-composite-actions</id><content type="html" xml:base="https://github.com/pages/colindembovsky/github-composite-actions/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sidetrail-azure-pipeline-templates&quot; id=&quot;markdown-toc-sidetrail-azure-pipeline-templates&quot;&gt;Sidetrail: Azure Pipeline Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#composite-actions&quot; id=&quot;markdown-toc-composite-actions&quot;&gt;Composite Actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#case-study-eshoponcontainers&quot; id=&quot;markdown-toc-case-study-eshoponcontainers&quot;&gt;Case Study: eShopOnContainers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Resistance is futile.&lt;br /&gt;
&lt;em&gt;The Borg. And GitHub.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--kg-card-end: markdown--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Edit: Thanks to &lt;a href=&quot;https://twitter.com/tspascoal&quot;&gt;Tiago&lt;/a&gt; for pointing out that you can have more than one Action in a repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GitHub Actions has rapidly become one of the most widely used CI/CD system on the planet. However, despite massive adoption, it is still fairly immature as a product, certainly when compared to &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt;. That will inevitably change as the Product Team iterates - but at the moment, there are some limitations that make Actions hard to use in many enterprise scenarios.&lt;/p&gt;

&lt;p&gt;The biggest drawback to date has been the fact that there is very limited support for &lt;em&gt;composability&lt;/em&gt; in Actions. That is, there are not templates that can be reused.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To those who are paying attention, Actions does have “templates” but these are more like &lt;em&gt;starter pipelines&lt;/em&gt; - they are not composable or callable - they simply give a suggested starting point based on the language found within a repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/actions/creating-actions/creating-a-composite-action&quot;&gt;Composite Actions&lt;/a&gt; have been around for a while - however, they were limited to running scripts. While this may allow some reusability, not being able to run other Actions was a severe limitation. Fortunately, you can now &lt;a href=&quot;https://github.blog/changelog/2020-08-07-github-actions-composite-run-steps/&quot;&gt;run other Actions&lt;/a&gt; from within a Composite Action.&lt;/p&gt;

&lt;p&gt;While this is certainly a step in the right direction, there are still some limitations and gotchas that I want to explore in this post.&lt;/p&gt;

&lt;h3 id=&quot;sidetrail-azure-pipeline-templates&quot;&gt;Sidetrail: Azure Pipeline Templates&lt;/h3&gt;

&lt;p&gt;Before we continue analyzing Composite Actions, I think it’s worthwhile considering templating in Azure Pipelines. Pipelines has a very strong templating system. There are several types of templates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variable templates - for templatizing common variables&lt;/li&gt;
  &lt;li&gt;Step templates - for templatizing common steps&lt;/li&gt;
  &lt;li&gt;Job and Stage templates - for templatizing entire jobs and stages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These templates are fully featured - that is, steps in a template have exactly the same operation and limitations as steps inline in a Pipeline. As we will see, this is not true for Composite Actions, which is why I mention it here.&lt;/p&gt;

&lt;h3 id=&quot;composite-actions&quot;&gt;Composite Actions&lt;/h3&gt;

&lt;p&gt;If I compare Azure Pipeline templates and Composite Actions, I would liken Composite Actions to Step templates in Azure Pipelines: that is, they really serve to group and parameterize sets of steps.&lt;/p&gt;

&lt;p&gt;Below we’ll look at an example. Before we do, let’s consider the limitations that Composite Actions have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You cannot pass in complex objects (like arrays of steps)&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;You cannot use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; conditions for steps&lt;/del&gt; &lt;strong&gt;Update 10/11/2021&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; is &lt;a href=&quot;https://github.blog/changelog/2021-11-09-github-actions-conditional-execution-of-steps-in-actions/&quot;&gt;now supported&lt;/a&gt; in Composite Actions&lt;/li&gt;
  &lt;li&gt;Composite Actions cannot read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; - you have to pass secrets in as parameters&lt;/li&gt;
  &lt;li&gt;The Actions log does not show a separate log per step as you would see in a “normal” Action - all the steps of the Composite are executed as if they were a single step, making debugging Composite Action logs harder to analyze:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;/assets/images/2021/9/1175_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note how the entire Composite Action only shows as a single step in the log, even though there are multiple steps in the Composite itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though there are some limitations, they are certainly a vast improvement to Actions. Hopefully we’ll see more features evolve in this space to allow better composition and sharing of Actions.&lt;/p&gt;

&lt;h2 id=&quot;case-study-eshoponcontainers&quot;&gt;Case Study: eShopOnContainers&lt;/h2&gt;

&lt;p&gt;A few months ago I got to do some work on the documentation for &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/&quot;&gt;DevOps for ASP.NET Core Developers&lt;/a&gt;. The repo with example is on &lt;a href=&quot;https://github.com/dotnet-architecture/eShopOnContainers&quot;&gt;GitHub&lt;/a&gt;. The sample application runs as a set of microservices on Kubernetes. Let’s take a look at the Action to build the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basketAPI&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;basket-api&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/BuildingBlocks/**&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/Services/Basket/**&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.github/workflows/basket-api.yml&lt;/span&gt;
      
      &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/BuildingBlocks/**&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/Services/Basket/**&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.github/workflows/basket-api.yml&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SERVICE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;basket-api&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;basket.api&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DOTNET_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.0.x&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    
      &lt;span class=&quot;na&quot;&gt;BuildContainersForPR_Linux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.event_name == 'pull_request' }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Action'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@master&lt;/span&gt;
        
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup dotnet&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-dotnet@v1&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.DOTNET_VERSION }}&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and run unit tests&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd src&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet restore &quot;eShopOnContainers-ServicesAndWebApps.sln&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd Services/Basket/Basket.API&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd -&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd Services/Basket/Basket.UnitTests&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet test --no-build -v=normal&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Compose build ${{ env.SERVICE }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo -E docker-compose build ${{ env.SERVICE }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./src&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.BRANCH }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REGISTRY_ENDPOINT }}&lt;/span&gt;
    
      &lt;span class=&quot;na&quot;&gt;BuildLinux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.event_name != 'pull_request' }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Action'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@master&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup dotnet&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-dotnet@v1&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dotnet-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.DOTNET_VERSION }}&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and run unit tests&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd src&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet restore &quot;eShopOnContainers-ServicesAndWebApps.sln&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd Services/Basket/Basket.API&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd -&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd Services/Basket/Basket.UnitTests&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet build --no-restore&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;dotnet test --no-build -v=normal&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Enable experimental features for the Docker daemon and CLI&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;echo $'{\n &quot;experimental&quot;: true\n}' | sudo tee /etc/docker/daemon.json&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;mkdir -p ~/.docker&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;echo $'{\n &quot;experimental&quot;: &quot;enabled&quot;\n}' | sudo tee ~/.docker/config.json&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;sudo service docker restart&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;docker version -f '{{.Client.Experimental}}'&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;docker version -f '{{.Server.Experimental}}'&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Login to Container Registry&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/login-action@v1&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REGISTRY_HOST }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.USERNAME }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.PASSWORD }}&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set branch name as env variable&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;currentbranch=$(echo ${GITHUB_REF##*/})&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo &quot;running on $currentbranch&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo &quot;BRANCH=$currentbranch&quot; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Compose build ${{ env.SERVICE }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo -E docker-compose build ${{ env.SERVICE }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./src&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.BRANCH }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REGISTRY_ENDPOINT }}&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Compose push ${{ env.SERVICE }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo -E docker-compose push ${{ env.SERVICE }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./src&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.BRANCH }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REGISTRY_ENDPOINT }}&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Create multiarch manifest&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;docker --config ~/.docker manifest create ${{ secrets.REGISTRY_ENDPOINT }}/${{ env.IMAGE }}:${{ env.BRANCH }} ${{ secrets.REGISTRY_ENDPOINT }}/${{ env.IMAGE }}:linux-${{ env.BRANCH }}&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;docker --config ~/.docker manifest push ${{ secrets.REGISTRY_ENDPOINT }}/${{ env.IMAGE }}:${{ env.BRANCH }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file is 126 lines long - which is not too bad for a single service. But there are 14 services! Before Composite Actions, you had no option but to copy/paste the code for each microservice. And that’s bad - since copy/paste inevitably leads to errors. And even if you don’t fat-finger it, what if you need to change something in the build process? Now you have to update 14 files. There are also deployment Actions for all the services - so now we have 28 files to maintain!&lt;/p&gt;

&lt;p&gt;When we analyze the common steps, there are 4 logical actions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build an image&lt;/li&gt;
  &lt;li&gt;Run tests, then build an image&lt;/li&gt;
  &lt;li&gt;Build and push an image&lt;/li&gt;
  &lt;li&gt;Deploy a helm chart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The steps for these logical actions are the same if we can parameterize them appropriately.&lt;/p&gt;

&lt;p&gt;Have a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuildLinux&lt;/code&gt; job above - this is the job that executes steps to “Build and push an image”. Here is what this job looks like if we refactor the steps into a Composite Action (which we’ll see next):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
      &lt;span class=&quot;na&quot;&gt;BuildLinux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.event_name != 'pull_request' }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout code&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/workflows/composite/build-push&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.SERVICE }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;registry_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REGISTRY_HOST }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;registry_endpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.REGISTRY_ENDPOINT }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;image_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.IMAGE }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;registry_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.USERNAME }}&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;registry_password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.PASSWORD }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s much better! We’re checking out the repo using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions/checkout@v2&lt;/code&gt; (we need to do this to get access to the code for the Composite Actions as well as the application code) and then we’re executing a Composite Action that is going to run all the steps we had inline previously.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note how we reference an Action in the local repo, using the full path to the folder (not the yaml file).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If Composite Actions could read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt;, we’d save another 4 lines. However, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; are not readable within Composite Actions, we have to pass them in as parameters.&lt;/p&gt;

&lt;p&gt;Let’s have a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action.yml&lt;/code&gt; for this Composite Action:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Builds&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pushes&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry&quot;&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;registry_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;e.g.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myacr.azureacr.io&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;registry_endpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;e.g.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myacr.azureacr.io/eshop&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;image&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;registry_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;registry_password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      
    &lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;composite&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Enable experimental features for the Docker daemon and CLI&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo $'{\n &quot;experimental&quot;: true\n}' | sudo tee /etc/docker/daemon.json&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;mkdir -p ~/.docker&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo $'{\n &quot;experimental&quot;: &quot;enabled&quot;\n}' | sudo tee ~/.docker/config.json&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;sudo service docker restart&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;docker version -f '{{.Client.Experimental}}'&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;docker version -f '{{.Server.Experimental}}'&lt;/span&gt;
    
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Login to Container Registry&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.registry_host }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.registry_username }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.registry_password }}&lt;/span&gt;
    
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set branch name as env variable&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;currentbranch=$(echo ${GITHUB_REF##*/})&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo &quot;running on $currentbranch&quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo &quot;BRANCH=$currentbranch&quot; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
    
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Compose build ${{ inputs.service }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo -E docker-compose build ${{ inputs.service }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./src&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.BRANCH }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.registry_endpoint }}&lt;/span&gt;
    
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Compose push ${{ inputs.service }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo -E docker-compose push ${{ inputs.service }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;working-directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./src&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.BRANCH }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.registry_endpoint }}&lt;/span&gt;
    
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Create multiarch manifest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker --config ~/.docker manifest create ${{ inputs.registry_endpoint }}/${{ inputs.image_name }}:${{ env.BRANCH }} ${{ inputs.registry_endpoint }}/${{ inputs.image_name }}:linux-${{ env.BRANCH }}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker --config ~/.docker manifest push ${{ inputs.registry_endpoint }}/${{ inputs.image_name }}:${{ env.BRANCH }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing too complex here - we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; attributes, followed by a map of input parameters. Each parameter has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required&lt;/code&gt; attribute, and can optionally have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; attribute too. Then we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs&lt;/code&gt; keyword with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using&lt;/code&gt; set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composite&lt;/code&gt;. Thereafter, we have steps as we would in any other Action - including the ability to use other Actions (not only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; scripts)!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that in Composite Actions, each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; step requires that you explicitly define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Composite Actions are a welcome addition to the Actions ecosystem, despite their limitations. I highly recommend that you start using them to reduce copy/paste and keep you and your Actions DRY!&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="actions" /><category term="build" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/pages/colindembovsky/assets/images/posts/actions.png" /><media:content medium="image" url="https://github.com/pages/colindembovsky/assets/images/posts/actions.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Custom CodeQL</title><link href="https://github.com/pages/colindembovsky/custom-codeql/" rel="alternate" type="text/html" title="Custom CodeQL" /><published>2021-02-09T17:17:58+00:00</published><updated>2021-02-09T17:17:58+00:00</updated><id>https://github.com/pages/colindembovsky/custom-codeql</id><content type="html" xml:base="https://github.com/pages/colindembovsky/custom-codeql/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#codeql-to-the-rescue&quot; id=&quot;markdown-toc-codeql-to-the-rescue&quot;&gt;CodeQL to the Rescue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#codeql-scanning-example&quot; id=&quot;markdown-toc-codeql-scanning-example&quot;&gt;CodeQL Scanning Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#customizing-scans&quot; id=&quot;markdown-toc-customizing-scans&quot;&gt;Customizing Scans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#custom-queries&quot; id=&quot;markdown-toc-custom-queries&quot;&gt;Custom Queries&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#local-development&quot; id=&quot;markdown-toc-local-development&quot;&gt;Local Development&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#writing-codeql-for-code-scanning&quot; id=&quot;markdown-toc-writing-codeql-for-code-scanning&quot;&gt;Writing CodeQL for Code Scanning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-codeql-query&quot; id=&quot;markdown-toc-example-codeql-query&quot;&gt;Example CodeQL Query&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#custom-queries-in-your-action&quot; id=&quot;markdown-toc-custom-queries-in-your-action&quot;&gt;Custom Queries in Your Action&lt;/a&gt;    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#repo&quot; id=&quot;markdown-toc-repo&quot;&gt;Repo&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Security is a big deal. So big that the marketing folks have created the moniker “DevSecOps” to highlight a focus on security. I’ve never liked that term, since DevOps is supposed to include security by definition. However, integrating security into your culture and into your pipelines can be a challenge.&lt;/p&gt;

&lt;p&gt;Typically, security is left to the end of the delivery life cycle. Perhaps you’re fortunate enough to work in a team where you are at least somewhat security conscious - but you probably don’t have InfoSec involved in your daily routine. This challenge has given rise to the term “shift left” where teams work to intentionally embed security earlier in the life cycle.&lt;/p&gt;

&lt;p&gt;But how do you do that? Security professionals often work with arcane tools that don’t integrate into pipelines and are difficult to automate. If the tooling doesn’t support the culture shift, then it can be doomed from the start.&lt;/p&gt;

&lt;h2 id=&quot;codeql-to-the-rescue&quot;&gt;CodeQL to the Rescue&lt;/h2&gt;

&lt;p&gt;Enter CodeQL. CodeQL (or Code Query Language) is a code scanning tool. It was called &lt;a href=&quot;https://semmle.com/&quot;&gt;Semmle&lt;/a&gt; (pronounced “sem-il”) before being acquired by GitHub. GitHub now offers CodeQL as part of the GitHub Advanced Security Suite.&lt;/p&gt;

&lt;p&gt;CodeQL can be used for a &lt;a href=&quot;https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/&quot;&gt;variety of popular languages&lt;/a&gt;: C/C++, C#, JavaScript/TypeScript, Java, Python and Go. To integrate CodeQL into your workflow, you create an &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Action&lt;/a&gt;. The Action initializes the CodeQL scanner which intercepts compilation calls in order to build a database of your code. After compilation, you can run queries against the code database using CodeQL syntax.&lt;/p&gt;

&lt;p&gt;The CodeQL syntax is very powerful - but, just like many other security tools, it too is arcane. However, the beauty of CodeQL is that you can tap into the community. There are some very smart security professionals in the community who have already written suites of queries that check for common security vulnerabilities and have open-sourced them! You don’t need to know how to write CodeQL to integrate it into your pipelines.&lt;/p&gt;

&lt;h2 id=&quot;codeql-scanning-example&quot;&gt;CodeQL Scanning Example&lt;/h2&gt;

&lt;p&gt;Let’s look at an example GitHub Action that performs a CodeQL scan on a Python repo:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;analyze&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Analyze&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fail-fast&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;python'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    
        &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout repository&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    
        &lt;span class=&quot;c1&quot;&gt;# Initializes the CodeQL tools for scanning.&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Initialize CodeQL&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github/codeql-action/init@v1&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.language }}&lt;/span&gt;
    
        &lt;span class=&quot;c1&quot;&gt;# - name: Autobuild&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# uses: github/codeql-action/autobuild@v1&lt;/span&gt;
    
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Perform CodeQL Analysis&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github/codeql-action/analyze@v1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 6 - 9: We define an array (matrix) of languages - in this case, just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail-fast&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; for multiple languages: if one fails, we want the others to run to completion rather than aborting all the jobs.&lt;/li&gt;
  &lt;li&gt;Lines 12/13: We checkout the repo - nothing special here&lt;/li&gt;
  &lt;li&gt;Lines 16 - 19: We initialize the CodeQL scanner - this sets up the interception calls so that CodeQL can build a database of our code as we compile. This step would cause the entire job to “fan out” to multiple jobs if we had more than 1 language specified.&lt;/li&gt;
  &lt;li&gt;Lines 21/22: For Python we don’t run a compilation, so I’ve commented out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autobuild&lt;/code&gt; step. If you’re using a compiled language like C++ or C#, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autobuild&lt;/code&gt; will attempt to build your code. If this fails, you can swap it out for your own set of steps to build your code.&lt;/li&gt;
  &lt;li&gt;Lines 24/25: This is where CodeQL will run a scan using a default set of queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This already gets us a good way into integrating security into our pipelines. Without having to understand CodeQL or write our own custom queries, we can start scanning our code on whatever trigger makes sense. Typically, you want to scan on merges into your main branch. You may also want to add a scheduled scan so that the latest suites are run against your code even if it hasn’t changed.&lt;/p&gt;

&lt;h2 id=&quot;customizing-scans&quot;&gt;Customizing Scans&lt;/h2&gt;

&lt;p&gt;There are a couple of levels of customizations for scanning. The easiest are customizing the suites and customizing the paths to include in your scans.&lt;/p&gt;

&lt;p&gt;To do this, add a yml file to your repo - you can place it anywhere, but convention is to place this file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/codeql&lt;/code&gt; inside your repo. Let’s look at this simple config:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CodeQL&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Config&quot;&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;security-and-quality&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;paths-ignore&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/node_modules&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**/*.test.js'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 1: we specifying a name for this configuration&lt;/li&gt;
  &lt;li&gt;Line 4: we customize the scans to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-and-quality&lt;/code&gt; suite (the default is just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-extended&lt;/code&gt; which does not include code quality scans)&lt;/li&gt;
  &lt;li&gt;Lines 6 - 11: we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paths&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paths-ignore&lt;/code&gt; to specify which folders should be included or ignored in the scans&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ignoring paths is useful when you want to exclude test code or 3rd party libraries: though you’ll want to integrate &lt;a href=&quot;https://dependabot.com/&quot;&gt;Dependabot&lt;/a&gt;to ensure you’re scanning 3rd party libraries for vulnerabilities! Fortunately Dependabot is automatically enabled for public repos on GitHub.&lt;/p&gt;

&lt;p&gt;Next, we update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codeql-action/init&lt;/code&gt; task to tell it to use our custom config file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Initialize CodeQL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github/codeql-action/init@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.language }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;config-file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/codeql/codeql-config.yml&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when scans are performed, CodeQL will read in the config file and configure itself according to our settings.&lt;/p&gt;

&lt;h2 id=&quot;custom-queries&quot;&gt;Custom Queries&lt;/h2&gt;

&lt;p&gt;We can, however, also create custom queries. As I mentioned previously, CodeQL is a strange and arcane language, so this is only recommended for advanced scenarios and users.&lt;/p&gt;

&lt;p&gt;There are two considerations with creating custom queries: firstly, the development environment. You need to create and run the queries locally. Once you’ve created a query, you can integrate it into your pipeline with some more config customization.&lt;/p&gt;

&lt;h3 id=&quot;local-development&quot;&gt;Local Development&lt;/h3&gt;

&lt;p&gt;To develop queries locally, you should install &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt;. After that, install the &lt;a href=&quot;https://codeql.github.com/docs/codeql-for-visual-studio-code/&quot;&gt;CodeQL extension&lt;/a&gt;. If you don’t have any code to work on, you can install the &lt;a href=&quot;https://codeql.github.com/docs/codeql-for-visual-studio-code/setting-up-codeql-in-visual-studio-code/#starter-workspace&quot;&gt;starter workspace&lt;/a&gt;. However, I want to show you how you can get CodeQL working on &lt;em&gt;your&lt;/em&gt; code.&lt;/p&gt;

&lt;p&gt;The trick is to clone the CodeQL core libraries &lt;em&gt;to your VSCode workspace&lt;/em&gt;. Clone your repo locally and open it in VSCode. Then clone the &lt;a href=&quot;https://github.com/github/codeql&quot;&gt;CodeQL repo&lt;/a&gt; to a location on your machine (not inside your repo). Finally, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File-&amp;gt;Add Folder to Workspace&lt;/code&gt; to add the codeQL folder to your VSCode workspace. Your Workspace explorer should look something like this:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/2/91547_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Workspace Explorer after importing CodeQL libraries&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Now you need to create a code database. In a console, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your repo directory and run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codeql database create codeqldb --language=python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course you’ll have to update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--language&lt;/code&gt; setting to the appropriate language. This will create a code database inside a folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codeqldb&lt;/code&gt; (you can customize that name too if needed). Don’t forget to add this folder to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file! In your CI/CD workflows, CodeQL will create a new database from the latest code, so you don’t want this database in source control.&lt;/p&gt;

&lt;p&gt;Now you can open your code database in the CodeQL extension. Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodeQL&lt;/code&gt; icon in the extension pane. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATABASES&lt;/code&gt; section, click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add from folder&lt;/code&gt; and browse to the folder above - in my case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codeqldb&lt;/code&gt;. It should import the database and show a check-mark:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/2/91552_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Importing the code database&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Now you can run queries that you write against the code database.&lt;/p&gt;

&lt;h3 id=&quot;writing-codeql-for-code-scanning&quot;&gt;Writing CodeQL for Code Scanning&lt;/h3&gt;

&lt;p&gt;A full CodeQL tutorial is beyond the scope of this post, but you can follow these fun &lt;a href=&quot;https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/&quot;&gt;detective tutorials&lt;/a&gt; here. They’re good for introducing CodeQL concepts, but mapping these to actual code is a challenge.&lt;/p&gt;

&lt;p&gt;If you just want to analyze your code, you can output whatever you want from a custom query. However, for custom queries to work in a pipeline, they must output specific values.&lt;/p&gt;

&lt;p&gt;There are two kinds of query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problem&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path-problem&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problem&lt;/code&gt; is used for detecting issues in a specific location in the code, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path-problem&lt;/code&gt; is used to analyze flow between sources and sinks.&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problem&lt;/code&gt; queries, we must only output two values: a CodeQL object and a description string. You’ll also want to add meaningful metadata to describe what the query is doing - the metadata is used to mark up results in the repo itself. There is also the ability to write &lt;a href=&quot;https://codeql.github.com/docs/writing-codeql-queries/query-help-files/&quot;&gt;CodeQL help files&lt;/a&gt; that can guide developers on what the query is detecting and include examples of how to fix issues and links to CVEs and other useful information. Unfortunately, help files only render for standard queries, and not for custom queries.&lt;/p&gt;

&lt;h3 id=&quot;example-codeql-query&quot;&gt;Example CodeQL Query&lt;/h3&gt;

&lt;p&gt;I was working with a customer that wanted to ensure that files are deleted in a certain way. As a naïve check, we wanted to find all calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutil.rmtree()&lt;/code&gt; in the code base and surface them as warnings for review. Here’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problem&lt;/code&gt; CodeQL query we wrote:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    /**
    * @id python/call-to-shutil-rmtree
    * @name Use of shutil.rmtree
    * @description We have specific ways to delete files - this query
    * notifies when there are calls to `shutil.rmtree` so
    * that we can revue how deletion is done.
    * @kind problem
    * @problem.severity warning
    * @precision high
    * @tags correctness
    * rmtree
    * 
    */
    
    import python
    
    from ControlFlowNode call, Value eval
    where eval = Value::named(&quot;shutil.rmtree&quot;) and
          call = eval.getACall()
    select call, &quot;Call to 'shutil.rmtree' detected.&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s first examine the metadata:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 2 - 4: we specify an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; for this query&lt;/li&gt;
  &lt;li&gt;Line 7: we specify that this is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problem&lt;/code&gt; query (as opposed to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path-problem&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Line 8: we specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;severity&lt;/code&gt; of this query - in this case we just wanted to surface this as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warning&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Line 9: we specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;precision&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high&lt;/code&gt; since we will not get many false positives for this query&lt;/li&gt;
  &lt;li&gt;Line 10/11: we add tags that can be used to filter/analyze results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now look at the query itself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 15: we import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; core libraries that contain definitions about python programs and constructs&lt;/li&gt;
  &lt;li&gt;Line 17: we are looking for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; objects as well as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlFlowNode&lt;/code&gt; nodes&lt;/li&gt;
  &lt;li&gt;Line 18/19: we are looking for any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; that is targeting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutil.rmtree&lt;/code&gt; either directly or indirectly&lt;/li&gt;
  &lt;li&gt;Line 20: we select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; object and specify a string message for matches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In VSCode, we write this query in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ql&lt;/code&gt; file. This file can reside anywhere, but conventionally we should put it into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/codeql/custom-queries/&amp;lt;language&amp;gt;&lt;/code&gt; folder (where language is one of the supported CodeQL languages).&lt;/p&gt;

&lt;p&gt;We can test this against our code by right-clicking the file and selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodeQL: Run Query&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/2/91643_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Running a query&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Assuming everything works, we should see results:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-width-wide kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/2/91645_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Local VSCode CodeQL results&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In the results pane on the right, we can see the message text as well as a link (this is generates from the object we selected). Clicking on the link will navigate us to the location of that object in the code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: This does not simply do a regex match - CodeQL understands syntax, so it will find references to shutil.rmtree even if you try to obfuscate it by creating a var for shutil and calling var.rmtree. It will also exclude functions called rmtree that are not defined in shutil.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When this is run against a codebase that contains calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutil.rmtree&lt;/code&gt;, we’ll see alerts like this in the CodeQL scanning alerts section of the Security tab in the repo:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-width-wide kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/2/91640_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Results of matches to CodeQL queries&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;custom-queries-in-your-action&quot;&gt;Custom Queries in Your Action&lt;/h2&gt;

&lt;p&gt;Now that we have a query, we need to customize the CodeQL config to tell the engine to include our query when performing a scan.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qlpack&lt;/code&gt; file - this tells the CodeQL engine where to find any dependencies. In our case, we have a dependency on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; core libs, so we create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qlpack&lt;/code&gt; file like so:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Custom Python Queries&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;libraryPathDependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;codeql-python&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This specifies a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; for the pack (which is any query in this folder, so we put the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qlpack&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/codeql/custom-queries/python&lt;/code&gt; folder). We also specify a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt; and list the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libraryPathDependencies&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codeql-config.yml&lt;/code&gt; file to look as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CodeQL&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Config&quot;&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;disable-default-queries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;security-and-quality&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/codeql/custom-queries/python&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We disable the default queries (so that we don’t get duplicates) and specify that we want to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-and-quality&lt;/code&gt; suite as well as the custom queries in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/codeql/custom-queries/python&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;That’s it! Now we’ll get alerts as shown above.&lt;/p&gt;

&lt;h3 id=&quot;repo&quot;&gt;Repo&lt;/h3&gt;

&lt;p&gt;The code I used can be found in &lt;a href=&quot;https://github.com/10thmagnitude/custom-codeql-python&quot;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You cannot see the security alerts unless you are a repo owner, so if you want to follow along with this and see the results, you’ll have to fork the repo and then enable Actions (by default Actions are disabled on forks).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;CodeQL is a powerful tool that can be incorporated fairly easily into your daily workflow. By using the standard queries, you get a strong foundation for securing your code.&lt;/p&gt;

&lt;p&gt;If you have security professionals who can author CodeQL queries, you can integrate those queries into your pipelines to customize the scanning.&lt;/p&gt;

&lt;p&gt;Unfortunately, the documentation for CodeQL, while extensive, proved to be a bit hard to apply to real-world examples. I also spent several hours trying to figure out why my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qhelp&lt;/code&gt; file was not rendering - only to be informed by a GitHub engineer that custom query &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qhelp&lt;/code&gt; rendering is not currently supported - something the documentation does not mention anywhere.&lt;/p&gt;

&lt;p&gt;However, assuming you can get a grasp on CodeQL, it is easy to integrate into scanning Actions. CodeQL is a great tool for shifting security left, so use it!&lt;/p&gt;

&lt;p&gt;Happy securing!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Post image from ShutterStock&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Colin Dembovsky</name></author><category term="security" /><category term="github" /><summary type="html"></summary></entry><entry><title type="html">Deployment with GitHub Actions: The Bad and the Ugly</title><link href="https://github.com/pages/colindembovsky/deployment-with-github-actions/" rel="alternate" type="text/html" title="Deployment with GitHub Actions: The Bad and the Ugly" /><published>2021-01-11T22:42:40+00:00</published><updated>2021-01-11T22:42:40+00:00</updated><id>https://github.com/pages/colindembovsky/deployment-with-github-actions</id><content type="html" xml:base="https://github.com/pages/colindembovsky/deployment-with-github-actions/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#environments-stages-jobs-and-templates&quot; id=&quot;markdown-toc-environments-stages-jobs-and-templates&quot;&gt;Environments, Stages, Jobs and Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#infrastructure-and-code&quot; id=&quot;markdown-toc-infrastructure-and-code&quot;&gt;Infrastructure and Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tailwind-web-app&quot; id=&quot;markdown-toc-tailwind-web-app&quot;&gt;TailWind Web App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interlude-terraform-wrapper&quot; id=&quot;markdown-toc-interlude-terraform-wrapper&quot;&gt;Interlude: Terraform Wrapper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-workaround&quot; id=&quot;markdown-toc-the-workaround&quot;&gt;The Workaround&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#secrets-and-approvals-on-environments&quot; id=&quot;markdown-toc-secrets-and-approvals-on-environments&quot;&gt;Secrets and Approvals on Environments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#manual-triggers&quot; id=&quot;markdown-toc-manual-triggers&quot;&gt;Manual Triggers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#disappearing-history---sort-of&quot; id=&quot;markdown-toc-disappearing-history---sort-of&quot;&gt;Disappearing History - Sort of&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pesky-environment-url&quot; id=&quot;markdown-toc-pesky-environment-url&quot;&gt;Pesky Environment URL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fireside-chat-with-chris-patterson&quot; id=&quot;markdown-toc-fireside-chat-with-chris-patterson&quot;&gt;Fireside Chat with Chris Patterson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me start this post with three disclaimers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/actions/reference/environments&quot;&gt;GitHub Actions Environments&lt;/a&gt; is in beta&lt;/li&gt;
  &lt;li&gt;I’m a huge fan of &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt;, which is a fairly mature product&lt;/li&gt;
  &lt;li&gt;The GitHub engineers (and PM &lt;a href=&quot;https://github.com/chrispat&quot;&gt;Chris Patterson&lt;/a&gt;) have been amazing with answering my questions and helping me deep dive into Actions for CD&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why start with disclaimers? Because (SPOILER ALERT) deployment with GitHub Actions is rough. Unfortunately, not even enough “good” to add “The Good” to the title of this post.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: for ease of typing and reading, I’ll refer to GitHub Actions as simply Actions, and Azure Pipelines as simply Pipelines for the remainder of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever since Actions was born, the vision has been “code to cloud”. This vision is exactly correct and certainly demos nicely if you have a simple web app and a single environment. But how do you handle a more complex real-world scenario? How do you deploy and configure infrastructure? How do you model multiple environments? Where do you store secrets and environment settings? How do you handle approvals?&lt;/p&gt;

&lt;p&gt;At GitHub Universe in December 2020, GitHub released Environments to Beta. This was the first baby step in moving towards a more “enterprise” deployment capability.&lt;/p&gt;

&lt;h2 id=&quot;environments-stages-jobs-and-templates&quot;&gt;Environments, Stages, Jobs and Templates&lt;/h2&gt;

&lt;p&gt;I’ve made a few Actions workflows and have always approached it as a slightly differently formatted Azure Pipeline that can only have jobs (no stages or environments). So when Actions Environments got released, I thought I’d approach Actions with the same paradigm I use when I create Pipelines.&lt;/p&gt;

&lt;p&gt;I was wrong.&lt;/p&gt;

&lt;p&gt;Firstly, I was annoyed that there is no such thing as a “&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/stages?view=azure-devops&amp;amp;tabs=yaml&quot;&gt;stage&lt;/a&gt;” in Actions. When writing Pipelines, I usually equate the &lt;em&gt;environment&lt;/em&gt; with a &lt;em&gt;stage&lt;/em&gt; and then run multiple jobs in each stage. This lets me create job &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops&quot;&gt;templates&lt;/a&gt; that I can reuse. Deployments should be as similar as possible between environments which I can easily model with parameterized templates.&lt;/p&gt;

&lt;p&gt;But Actions doesn’t have templates - though it’s on the &lt;a href=&quot;https://github.com/github/roadmap/issues/98&quot;&gt;roadmap&lt;/a&gt;. For now, I’ll just have to live with some copy-and-paste.&lt;/p&gt;

&lt;p&gt;While there are no stages, I could conceptually map jobs to stages in an Action workflow, and use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; attribute to tell GitHub that a job is targeting an environment. If I need multiple jobs for a stage, I can use a naming convention to loosely group them, even if the UI won’t.&lt;/p&gt;

&lt;p&gt;Except that Actions behaves strangely when you have multiple jobs targeting a single environment (more about this later).&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-and-code&quot;&gt;Infrastructure and Code&lt;/h2&gt;

&lt;p&gt;I bounce back and forth between having infrastructure and app code in the same pipeline or having separate pipelines for these concerns. Using Pipelines, I typically have an infrastructure job to get the environment resources spun up and/or configured, and then have a deployment job to deploy app code, and then have one or more test jobs for running tests. I always use a single build job to produce a single binary that is promoted between environments.&lt;/p&gt;

&lt;p&gt;However, this can complicate approvals. Typically, ops folks will approve infrastructure changes, while dev folks will approve code deployments. As much as we should be working on cross-functional teams, it’s all too common to still see silos in the enterprise. And even on cross-functional teams, we’re usually all T-shaped - that is, we’re usually more “ops-ey” or more “dev-ey” and so approvals tend to fall along that divide. This scenario works fine with Pipelines since each job in the stage is targeting an environment and the approvals are defined on the environment. There’s no way of specifying who exactly should do the review, so the team will have to work out who’s approval is currently pending (is it for infra or for code). GitHub Environments have the same limitation.&lt;/p&gt;

&lt;p&gt;After chatting through some of the challenges with Chris Patterson (PM for Actions) he suggested splitting infra and code into separate pipelines. I can at least trigger the infra pipeline only if infra code changes, and trigger the app pipeline for everything else this way.&lt;/p&gt;

&lt;h2 id=&quot;tailwind-web-app&quot;&gt;TailWind Web App&lt;/h2&gt;

&lt;p&gt;Let’s make this a bit more concrete. For ease of use, I’ll be using a DotNetCore app called TailWind originally from Microsoft, just so that I have some code I can deploy to Azure. I forked the &lt;a href=&quot;https://github.com/microsoft/TailwindTraders-Website&quot;&gt;Microsoft repo&lt;/a&gt; and added in Terraform templates for the infra into &lt;a href=&quot;https://github.com/10thmagnitude/TailwindTraders-Website&quot;&gt;my version&lt;/a&gt;. Now I have infra-as-code as well as the app code.&lt;/p&gt;

&lt;p&gt;Using Azure Pipelines, I would have a workflow that looks something like this:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/1/111917_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Azure Pipeline for deploying TailWind Web App&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are multiple stages/jobs here:&lt;/p&gt;

&lt;!--kg-card-begin: markdown--&gt;
&lt;ol&gt;
  &lt;li&gt;Stage 1: Build and test sources
    &lt;ul&gt;
      &lt;li&gt;this builds and packages the code and runs unit tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage 2: Deploy to DEV
    &lt;ul&gt;
      &lt;li&gt;Run terraform to create/configure infrastructure in the DEV environment&lt;/li&gt;
      &lt;li&gt;Deploy the web app using the package from Stage 1&lt;/li&gt;
      &lt;li&gt;Run Selenium (coded UI) tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage 3: Canary deployment to PROD
    &lt;ul&gt;
      &lt;li&gt;Run terraform to create/configure infrastructure in the PROD environment&lt;/li&gt;
      &lt;li&gt;Deploy the web app using the package from Stage 1&lt;/li&gt;
      &lt;li&gt;Route traffic to the staging slot&lt;/li&gt;
      &lt;li&gt;Run JMeter (load) tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage 4: Promote or Rollback
    &lt;ul&gt;
      &lt;li&gt;Depending on the outcome of the tests against the Canary slot, we can either promote to PROD (slot swap) or simply route all traffic back to the production slot (this is effectively a rollback)
&lt;!--kg-card-end: markdown--&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the jobs in the Pipeline are templatized - you’ll note that I use the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run terraform&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy the web app&lt;/code&gt; jobs in stage 2 and 3, just passing in environment specific values.&lt;/p&gt;

&lt;p&gt;Since I don’t have stages in Actions, my initial Action workflow looked like this:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/1/111933_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;End to end Action&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here I have the following jobs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;build - builds and packages code (and would run unit tests here if I had any)&lt;/li&gt;
  &lt;li&gt;dev_infra_plan - runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; against the DEV environment&lt;/li&gt;
  &lt;li&gt;dev_infra_apply - downloads the output plan from the previous job and runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;dev_deploy - deploys web app package from job 1 to the DEV environment&lt;/li&gt;
  &lt;li&gt;prod_infra_plan - runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; against the PROD environment&lt;/li&gt;
  &lt;li&gt;prod_infra_apply - downloads the output plan from the previous job and runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;prod_deploy - deploys web app package from job 1 to the PROD environment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes, I had to use copy and paste for jobs 2 and 5, 3 and 6 and 4 and 7. But I know templates are coming, so I could live with that for a while. However, the job got stuck in this state and I could never get to job 5 (the start of the PROD jobs). That’s when Chris Patterson helped me understand that because I have multiple jobs targeting the same environment(s) strange things are happening…&lt;/p&gt;

&lt;p&gt;So it seems you shouldn’t have &lt;em&gt;multiple jobs targeting the same environment&lt;/em&gt;. And you can’t have templates. Now I was faced with giant blocks of Actions that were reduced into BUILD-&amp;gt;DEV-&amp;gt;PROD with a single job for each. And a single approval for each.&lt;/p&gt;

&lt;p&gt;Horrible. Just horrible.&lt;/p&gt;

&lt;h2 id=&quot;interlude-terraform-wrapper&quot;&gt;Interlude: Terraform Wrapper&lt;/h2&gt;

&lt;p&gt;Before I get to some workarounds for some of the challenges, I want to mention how I lost several hours of my life. Take a look at this snippet:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install TF&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hashicorp/setup-terraform@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;terraform_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.tf_version }}&lt;/span&gt;
    
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Init TF&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;terraform init --backend-config=&quot;key=${{ env.env_name }}.terraform.tfstate&quot;&lt;/span&gt;
    
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TF Output web app URL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;url=$(terraform output -raw webAppURL)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo &quot;The URL is $url&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This workflow snippet is really modelling the following commands:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;s&quot;&gt;terraform init --backend-config=&quot;key=DEV.terraform.tfstate&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;url=$(terraform output -raw webAppURL)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;echo &quot;The URL is $url&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When running these locally, I get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The URL is http://&amp;lt;url&amp;gt;&lt;/code&gt; which is what I expect.&lt;/p&gt;

&lt;p&gt;When running the workflow, I could not get this to work. I wasted a lot of time trying to figure out what I was doing wrong. The message looked something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The url is [command]/home/runner/work/_temp/056bc345-efd0-4b6d-ae6c-94094f124a7f/terraform-bin output -raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turns out that all I had done wrong was make an assumption about how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashicorp/setup-terraform@v1&lt;/code&gt; task works. I assumed it just installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;. However, in this configuration, it installs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt; and creates a wrapper around the executable, so you cannot treat terraform commands as you would locally - you have to access the output parameters.&lt;/p&gt;

&lt;p&gt;To be fair, the Hashi folks make this clear on their &lt;a href=&quot;https://github.com/hashicorp/setup-terraform&quot;&gt;documentation&lt;/a&gt;, but I didn’t think I’d need to read the docs for running an install! I logged &lt;a href=&quot;https://github.com/hashicorp/setup-terraform/issues/85&quot;&gt;this issue&lt;/a&gt; for them to update the logging so that others who make the same assumption don’t waste hours before realizing that the Action installs a wrapper by default.&lt;/p&gt;

&lt;p&gt;So at this point, while I was trying hard to love Actions, it just wasn’t looking good.&lt;/p&gt;

&lt;h2 id=&quot;the-workaround&quot;&gt;The Workaround&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Workflow code is &lt;a href=&quot;https://github.com/10thmagnitude/TailwindTraders-Website/blob/main/.github/workflows/infra-end-to-end.yaml&quot;&gt;here&lt;/a&gt; for my infra end to end and &lt;a href=&quot;https://github.com/10thmagnitude/TailwindTraders-Website/blob/main/.github/workflows/app-end-to-end.yaml&quot;&gt;here&lt;/a&gt; for my app end to end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing to do was to split the infrastructure Actions from the code deployment Actions. This made the workflows more aligned to a single responsibility. Since approvals are still on the environments, I still don’t have a good way to separate infra approvals from code deployment approvals. I could create two environment objects in Actions that are conceptually the same environment, but that can get hard to manage if I have secrets (which are defined on the environment). Having two environments with the same settings means I have to duplicate all the settings.&lt;/p&gt;

&lt;h2 id=&quot;secrets-and-approvals-on-environments&quot;&gt;Secrets and Approvals on Environments&lt;/h2&gt;

&lt;p&gt;I need to reference DEV for both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approve&lt;/code&gt; jobs so that I can authenticate to the Azure subscription. Ideally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; would run without requiring an approval and then I can review the output of the plan before I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;. However, since I need to reference the environment in both jobs, I have to approve both jobs. Azure Pipelines suffers a similar limitation.&lt;/p&gt;

&lt;p&gt;I ended up with three environments: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD-PLAN&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt;. I have defined the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AZURE_CREDENTIALS&lt;/code&gt; secret for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; at the repository level. That way, when any job refers to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; by default it will get the credentials for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt;. For jobs running in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt;, I explicitly reference the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt; environment using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; attribute. That way I can get the credentials for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why did I default to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; and not to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt;? The only reason was to avoid having to approve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; job for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt;. What happens now is that I have an approval on the environment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt; but I don’t reference that for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-plan&lt;/code&gt; job. Instead I reference &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD-PLAN&lt;/code&gt; just so that I know this is a deployment job - but there is no approval on this environment. The value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; is the PROD value, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; goes ahead and performs a plan against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt;. The next job, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod-apply&lt;/code&gt; explicitly references &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; and so waits for the approval.&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt; I don’t have approvals, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;, though both referencing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt; so that they get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEV&lt;/code&gt; credentials, do not wait for approvals.&lt;/p&gt;

&lt;p&gt;Of course, if I had a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UAT&lt;/code&gt; environment, I’d have to choose to split it or just live with having to approve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt; jobs.&lt;/p&gt;

&lt;p&gt;In fact, I don’t really need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD-PLAN&lt;/code&gt; environment at all in this case - there are no secrets for this faux environment and no approvals. But if infra folks did require an approval before running a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; I can just update the environment.&lt;/p&gt;

&lt;h2 id=&quot;manual-triggers&quot;&gt;Manual Triggers&lt;/h2&gt;

&lt;p&gt;You can create a manual trigger for a workflow - but there are some gotchas. Firstly, you have to specify a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_dispatch&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; event - even if it’s empty like so:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# manual trigger&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;main&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_dispatch:&lt;/code&gt; looks a bit odd, but that is the correct syntax.&lt;/p&gt;

&lt;p&gt;And the “Run Workflow” button &lt;strong&gt;won’t appear for that workflow&lt;/strong&gt; , even if it has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow_dispatch&lt;/code&gt; trigger, unless that workflow is in the default (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; or whatever you’ve set your default branch to) branch.&lt;/p&gt;

&lt;h2 id=&quot;disappearing-history---sort-of&quot;&gt;Disappearing History - Sort of&lt;/h2&gt;

&lt;p&gt;Another issue with the UI is the tree of workflows to the left of the run history UI:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/1/112238_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Tree listing all workflows in the main branch of the repo&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I initially had a workflow called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End to End&lt;/code&gt;. When I split it into two files for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App Deploy End to End&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Infra Deploy End to End&lt;/code&gt;, the node in the tree for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End to End&lt;/code&gt; disappeared. The runs are still in the list (the 210 results you can see in the screenshot) but I can’t filter by that workflow. I’m guessing that the tree on the left is built from &lt;em&gt;current&lt;/em&gt; workflows in the .github folder in the main branch - so if you delete or rename a workflow, you’ll lose the node on the left.&lt;/p&gt;

&lt;h2 id=&quot;pesky-environment-url&quot;&gt;Pesky Environment URL&lt;/h2&gt;

&lt;p&gt;Let’s have a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; attribute of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; in an app deployment workflow job:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;na&quot;&gt;prod_deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prod_deploy_canary&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PROD&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.slot_swap.outputs.url }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will set the URL of the job in the UI accordingly so that users can easily link to the environment - as long as it’s a &lt;em&gt;valid&lt;/em&gt; URL. The URL has to start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; otherwise it won’t show anything. This foxed me for a while - since some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;az cli&lt;/code&gt; commands just output the URL without the protocol, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;somesite.azurewebsites.net&lt;/code&gt;. Remember to prepend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&lt;/code&gt; or they won’t show.&lt;/p&gt;

&lt;p&gt;Another quirk is that the URL updates for all jobs referencing the environment. In my scenario, I have two jobs for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; environment: a canary deployment that deploys to a staging slot and a “full” deployment that performs a slot swap. For the canary job, the URL is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://my-site-staging.azurewebsites.net&lt;/code&gt; while for the “full” deployment the URL is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://my-site.azurewebsites.net&lt;/code&gt;. But both are targeting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; environment. Here is what the workflow looks like after the canary job:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/1/11214_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Workflow after the Canary job&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;However, after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod_deploy&lt;/code&gt; job, the URL is updated for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROD&lt;/code&gt; which both jobs reference, and the UI ends up dropping the canary URL:&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;/assets/images/2021/1/11218_image.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Canary URL is gone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I’m not sure why Actions does this - perhaps both environments should show the final value? It’s strange that the value is wiped.&lt;/p&gt;

&lt;h2 id=&quot;fireside-chat-with-chris-patterson&quot;&gt;Fireside Chat with Chris Patterson&lt;/h2&gt;

&lt;p&gt;Chris Patterson (PM at Actions) kindly connected with me to walk through some of the challenges I was experiencing and questions I had. We also got to chat about some of the upcoming improvements that he and the team are planning. Rest assured that the GitHub team know that Actions Environments are in beta and have a lot of ideas for future features and improvements. Since Chris was PM of Azure Pipelines, he has a lot of experience with CI/CD tools and has a lot of experience of what worked well and what made life complicated. I don’t envy his job: make Actions simple to approach, but powerful. Make it deterministic, but dynamic - it’s a very fine balancing act.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Actions is still relatively young and already it is the most popular CI tool on GitHub. It has some maturing to do to compete in the CD space. For now, I’d still recommend using GitHub for source control and security scanning, and use Azure DevOps for CI/CD Pipelines and Boards.&lt;/p&gt;

&lt;p&gt;GitHub Actions still have a ways to go to become a mature CD tool. For now, you’re probably better off trying to craft your CD workflows as a single job per environment, splitting infrastructure and code deployments to reduce complexity in the overall workflow. Hopefully we’ll get templates too, as well as some way to better manage jobs that need environment values but are not actually deployment jobs (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; which needs values, but does not change the environment). And hopefully being able to have multiple jobs (like canary and full deploy) targeting the same environments will receive a better experience too. Lots of work for the engineering team to do still!&lt;/p&gt;

&lt;p&gt;Finally, I’ll remind the reader that Actions are in beta - so some rough edges are to be expected. But there is a seed of promise there that we can fully expect to blossom soon!&lt;/p&gt;

&lt;p&gt;Happy deploying!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="actions" /><summary type="html"></summary></entry><entry><title type="html">DevOps Benefits of Limiting WIP</title><link href="https://github.com/pages/colindembovsky/benefits-of-limiting-wip/" rel="alternate" type="text/html" title="DevOps Benefits of Limiting WIP" /><published>2020-11-19T01:57:40+00:00</published><updated>2020-11-19T01:57:40+00:00</updated><id>https://github.com/pages/colindembovsky/benefits-of-limiting-wip</id><content type="html" xml:base="https://github.com/pages/colindembovsky/benefits-of-limiting-wip/">&lt;ol id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#branching&quot; id=&quot;markdown-toc-branching&quot;&gt;Branching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testing&quot; id=&quot;markdown-toc-testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture&quot; id=&quot;markdown-toc-architecture&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-debt&quot; id=&quot;markdown-toc-technical-debt&quot;&gt;Technical Debt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ve recently completed several DevOps Assessments for various customers. These assessments go through work item tracking and planning, source control practices, automated build and test, release and test management, database DevOps, security, architecture, ops and monitoring and team structures. It’s a lot to cover - and I’ve noticed a common theme that comes up over and over: almost every team has too much work in progress (WIP).&lt;/p&gt;

&lt;p&gt;This generally comes up early on when we talk about work item tracking, which I won’t cover here since there are plenty of posts (including some of mine) that cover why you should limit WIP for work items. But there are numerous impacts of having too much WIP in other areas of the delivery lifecycle. In this post I’ll go through some of them.&lt;/p&gt;

&lt;h2 id=&quot;branching&quot;&gt;Branching&lt;/h2&gt;

&lt;p&gt;I’m a fan of &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub Flow&lt;/a&gt; (also known as trunk development or master development).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: GitHub Flow is not the same as GitFlow. I don’t like GitFlow for several reasons, but the most glaring is that it is at heart a manner of code-promotion: I think that binary promotion is far better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At a high level, the idea behind GitHub Flow is that you have a single stable branch (master) and every User Story is developed on a &lt;em&gt;topic&lt;/em&gt; branch (sometimes called a &lt;em&gt;feature&lt;/em&gt; branch too, but the word feature can get overloaded). Once you’re code complete, you create a Pull Request (PR) to merge the isolated topic-branch code into the master branch.&lt;/p&gt;

&lt;p&gt;This lends itself well to Continuous Integration and Continuous Delivery (CI/CD) since the code change is usually small. Several topic branches can be in flight at the same time.&lt;/p&gt;

&lt;p&gt;However, if you have too many topic branches because you have too much WIP, then you quickly get into situations where topic branches cannot be merged because the large number of branches is overwhelming the test environments. Also, if you release in large batches, you’ll probably want to merge topic branches together before merging to master to do integration testing.&lt;/p&gt;

&lt;p&gt;I’ve seen teams introduce a second “semi-stable” branch between master and the topic branches (often called DEV or INT). The idea is that topic branches merge to the DEV branch for integration testing and the DEV branch is then merged to master for release.&lt;/p&gt;

&lt;p&gt;However, this isn’t solving the issue. Now the DEV branch becomes congested. To make matters worse, teams that use this approach often have product owners that want certain features to go to PROD while other untested features should not. Now developers are not merging early, they’re deferring merging to some later date when the rest of the process is “ready” for the code. This leads to stale branches and an accumulation of merge debt and general mess.&lt;/p&gt;

&lt;p&gt;In short, reducing the number of topic branches by limiting WIP reduces the number of isolated branches (and corresponding test environments) required to release completed code. Teams can then use GitHub Flow without needing interim branches and they won’t accumulate merge debt.&lt;/p&gt;

&lt;p&gt;Ultimately, limiting WIP is going to simplify your branching strategy!&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Teams that have high or uncontrolled WIP generally have huge resource contention on test environments. Ideally, each story in flight has its own branch in source control and its own environment. That way each story can be developed and tested in isolation. However, if you have do not have WIP limits, then you fast end up running out of test environments.&lt;/p&gt;

&lt;p&gt;Spinning up environments dynamically can certainly help, but often this is not cost effective. Again teams are left trying to come up with workarounds. For example, sharing environments: which makes test results harder to decipher since if there are multiple builds in an environment at the same time and there are failures, which build is responsible? How do you handle conflicting changes and dependencies?&lt;/p&gt;

&lt;p&gt;I hear the astute reader ask, “What about integration testing? How do you test the combined effects of multiple stories that are in flight together?” Well, if there are a low number of these, you can easily merge one story into another (or create a combined branch) for this sort of testing. Of course, if you have lower WIP, then your cycle times will reduce proportionately (via Little’s Law, since lowering WIP also lowers cycle times) so you can release one story at a time, meaning you have less time where there are multiple incomplete stories at any one time.&lt;/p&gt;

&lt;p&gt;Simply put, reducing WIP will increase your ability to test and reduce test environment management overhead.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;Rather than stating how reducing WIP can affect architecture, this one works that other way around. Monolithic architectures, by nature of being large, tend to require batching changes and releases, which drives up the WIP. However, decomposing systems into loosely coupled services that can be released independently (ahem, microservices, anyone?) means that changes to components can be released far quicker. And, again via Little’s Law, if we reduce cycle time, we’ll be reducing WIP.&lt;/p&gt;

&lt;p&gt;In other words, modular, testable, loosely-coupled components allow teams to reduce WIP.&lt;/p&gt;

&lt;h2 id=&quot;technical-debt&quot;&gt;Technical Debt&lt;/h2&gt;

&lt;p&gt;Every application has some form of technical debt. And most product owners don’t care about fixing technical debt, particularly because it is often abstract: it’s not a new feature or a bug-fix. However, technical debt, like unpaid mortgage debt, tends to get worse the longer you don’t pay it down.&lt;/p&gt;

&lt;p&gt;Dealing with technical debt will ultimately make systems (and teams) more agile, since there can be more focus on new features and updates, rather than bug-fixing. However, even if your team recognizes the value of paying down technical debt, if there is no elasticity in the backlog or project plan because there is too much WIP, then your team will never have time to pay down the technical debt!&lt;/p&gt;

&lt;p&gt;Lowering WIP allows teams time to actually address technical debt. And as teams pay down the technical debt, they become faster at new features and at bug-fixes, which ultimately is going to make users happier.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you can see, lowering WIP not only has an impact on the project plan and work item tracking, but can simplify branching strategies, lower test overhead and resource contention, aid modernizing architecture and reduce technical debt. Whatever you’re doing to improve your DevOps, make sure you’re relentless about lowering your WIP!&lt;/p&gt;

&lt;p&gt;Happy delivering!&lt;/p&gt;</content><author><name>Colin Dembovsky</name></author><category term="devops" /><category term="process" /><summary type="html"></summary></entry></feed>